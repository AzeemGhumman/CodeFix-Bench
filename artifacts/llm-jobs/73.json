{
    "pr": "scikit-learn/scikit-learn/10306",
    "problem": "Some UserWarnings should be ConvergenceWarnings\nSome warnings raised during testing show that we do not use `ConvergenceWarning` when it is appropriate in some cases. For example (from [here](https://github.com/scikit-learn/scikit-learn/issues/10158#issuecomment-345453334)):\r\n\r\n```python\r\n/home/lesteve/dev/alt-scikit-learn/sklearn/decomposition/fastica_.py:118: UserWarning: FastICA did not converge. Consider increasing tolerance or the maximum number of iterations.\r\n/home/lesteve/dev/alt-scikit-learn/sklearn/cluster/birch.py:629: UserWarning: Number of subclusters found (2) by Birch is less than (3). Decrease the threshold.\r\n```\r\n\r\nThese should be changed, at least. For bonus points, the contributor could look for other warning messages that mention \"converge\".\n",
    "hint": "Could I give this a go?\n@patrick1011 please go ahead!",
    "base": "b90661d6a46aa3619d3eec94d5281f5888add501",
    "section": 0,
    "files": [
        "setup.py:CleanCommand.run,configuration,get_numpy_status,setup_package",
        "doc/conf.py:make_carousel_thumbs,setup",
        "doc/conftest.py:setup_labeled_faces,setup_mldata,teardown_mldata,setup_rcv1,setup_twenty_newsgroups,setup_working_with_text_data,pytest_runtest_setup,pytest_runtest_teardown",
        "doc/tutorial/machine_learning_map/parse_path.py:Command,Arguments,CaselessPreservingLiteral.__init__,CaselessPreservingLiteral.parseImpl,Sequence,convertToFloat,get_points",
        "doc/tutorial/machine_learning_map/pyparsing.py:_xml_escape,ParseBaseException.__init__,ParseBaseException._from_exception,ParseBaseException.__getattr__,ParseBaseException.__str__,ParseBaseException.__repr__,ParseBaseException.markInputline,ParseBaseException.__dir__,RecursiveGrammarException.__init__,RecursiveGrammarException.__str__,_ParseResultsWithOffset.__init__,_ParseResultsWithOffset.__getitem__,_ParseResultsWithOffset.__repr__,_ParseResultsWithOffset.setOffset,ParseResults.__new__,ParseResults.__init__,ParseResults.__getitem__,ParseResults.__setitem__,ParseResults.__delitem__,ParseResults.__contains__,ParseResults.__len__,ParseResults.__bool__,ParseResults.__iter__,ParseResults.__reversed__,ParseResults._iterkeys,ParseResults._itervalues,ParseResults._iteritems,ParseResults.haskeys,ParseResults.pop,ParseResults.get,ParseResults.insert,ParseResults.append,ParseResults.extend,ParseResults.clear,ParseResults.__getattr__,ParseResults.__add__,ParseResults.__iadd__,ParseResults.__radd__,ParseResults.__repr__,ParseResults.__str__,ParseResults._asStringList,ParseResults.asList,ParseResults.asDict,ParseResults.copy,ParseResults.asXML,ParseResults.__lookup,ParseResults.getName,ParseResults.dump,ParseResults.pprint,ParseResults.__getstate__,ParseResults.__setstate__,ParseResults.__getnewargs__,ParseResults.__dir__,col,lineno,line,_defaultStartDebugAction,_defaultSuccessDebugAction,_defaultExceptionDebugAction,nullDebugAction,_trim_arity,ParserElement.setDefaultWhitespaceChars,ParserElement.inlineLiteralsUsing,ParserElement.__init__,ParserElement.copy,ParserElement.setName,ParserElement.setResultsName,ParserElement.setBreak,ParserElement.setParseAction,ParserElement.addParseAction,ParserElement.addCondition,ParserElement.setFailAction,ParserElement._skipIgnorables,ParserElement.preParse,ParserElement.parseImpl,ParserElement.postParse,ParserElement._parseNoCache,ParserElement.tryParse,ParserElement.canParseNext,ParserElement._parseCache,ParserElement.resetCache,ParserElement.enablePackrat,ParserElement.parseString,ParserElement.scanString,ParserElement.transformString,ParserElement.searchString,ParserElement.split,ParserElement.__add__,ParserElement.__radd__,ParserElement.__sub__,ParserElement.__rsub__,ParserElement.__mul__,ParserElement.__rmul__,ParserElement.__or__,ParserElement.__ror__,ParserElement.__xor__,ParserElement.__rxor__,ParserElement.__and__,ParserElement.__rand__,ParserElement.__invert__,ParserElement.__call__,ParserElement.suppress,ParserElement.leaveWhitespace,ParserElement.setWhitespaceChars,ParserElement.parseWithTabs,ParserElement.ignore,ParserElement.setDebugActions,ParserElement.setDebug,ParserElement.__str__,ParserElement.__repr__,ParserElement.streamline,ParserElement.checkRecursion,ParserElement.validate,ParserElement.parseFile,ParserElement.__eq__,ParserElement.__ne__,ParserElement.__hash__,ParserElement.__req__,ParserElement.__rne__,ParserElement.matches,ParserElement.runTests,Token.__init__,Empty.__init__,NoMatch.__init__,NoMatch.parseImpl,Literal.__init__,Literal.parseImpl,Keyword.__init__,Keyword.parseImpl,Keyword.copy,Keyword.setDefaultKeywordChars,CaselessLiteral.__init__,CaselessLiteral.parseImpl,CaselessKeyword.__init__,CaselessKeyword.parseImpl,CloseMatch.__init__,CloseMatch.parseImpl,Word.__init__,Word.parseImpl,Word.__str__,Regex.__init__,Regex.parseImpl,Regex.__str__,QuotedString.__init__,QuotedString.parseImpl,QuotedString.__str__,CharsNotIn.__init__,CharsNotIn.parseImpl,CharsNotIn.__str__,White.__init__,White.parseImpl,_PositionToken.__init__,GoToColumn.__init__,GoToColumn.preParse,GoToColumn.parseImpl,LineStart.__init__,LineStart.parseImpl,LineEnd.__init__,LineEnd.parseImpl,StringStart.__init__,StringStart.parseImpl,StringEnd.__init__,StringEnd.parseImpl,WordStart.__init__,WordStart.parseImpl,WordEnd.__init__,WordEnd.parseImpl,ParseExpression.__init__,ParseExpression.__getitem__,ParseExpression.append,ParseExpression.leaveWhitespace,ParseExpression.ignore,ParseExpression.__str__,ParseExpression.streamline,ParseExpression.setResultsName,ParseExpression.validate,ParseExpression.copy,And.__init__,And.parseImpl,And.__iadd__,And.checkRecursion,And.__str__,Or.__init__,Or.parseImpl,Or.__ixor__,Or.__str__,Or.checkRecursion,MatchFirst.__init__,MatchFirst.parseImpl,MatchFirst.__ior__,MatchFirst.__str__,MatchFirst.checkRecursion,Each.__init__,Each.parseImpl,Each.__str__,Each.checkRecursion,ParseElementEnhance.__init__,ParseElementEnhance.parseImpl,ParseElementEnhance.leaveWhitespace,ParseElementEnhance.ignore,ParseElementEnhance.streamline,ParseElementEnhance.checkRecursion,ParseElementEnhance.validate,ParseElementEnhance.__str__,FollowedBy.__init__,FollowedBy.parseImpl,NotAny.__init__,NotAny.parseImpl,NotAny.__str__,_MultipleMatch.__init__,_MultipleMatch.parseImpl,OneOrMore.__str__,ZeroOrMore.__init__,ZeroOrMore.parseImpl,ZeroOrMore.__str__,_NullToken.__bool__,_NullToken.__str__,Optional.__init__,Optional.parseImpl,Optional.__str__,SkipTo.__init__,SkipTo.parseImpl,Forward.__init__,Forward.__lshift__,Forward.__ilshift__,Forward.leaveWhitespace,Forward.streamline,Forward.validate,Forward.__str__,Forward.copy,_ForwardNoRecurse.__str__,TokenConverter.__init__,Combine.__init__,Combine.ignore,Combine.postParse,Group.__init__,Group.postParse,Dict.__init__,Dict.postParse,Suppress.postParse,Suppress.suppress,OnlyOnce.__init__,OnlyOnce.__call__,OnlyOnce.reset,traceParseAction,delimitedList,countedArray,_flatten,matchPreviousLiteral,matchPreviousExpr,_escapeRegexRangeChars,oneOf,dictOf,originalTextFor,ungroup,locatedExpr,srange,matchOnlyAtCol,replaceWith,removeQuotes,tokenMap,_makeTags,makeHTMLTags,makeXMLTags,withAttribute,withClass,infixNotation,nestedExpr,indentedBlock,replaceHTMLEntity,pyparsing_common.convertToDate,pyparsing_common.convertToDatetime,pyparsing_common.stripHTMLTags,_ustr,wrapper,_UnboundedCache.__init__,_ErrorStop.__init__,z,countFieldParseAction,copyTokenToRepeater,copyTokenToRepeater,verifyCol,pa,pa,checkPeerIndent,checkSubIndent,checkUnindent,keys,values,items,toItem,extract_stack,extract_tb,_FifoCache.__init__,_FifoCache.__init__,mustMatchTheseTokens,extractText,cvt_fn,cvt_fn,breaker,pa,get,set,clear,cache_len,makeOptionalList,charsAsStr,get,set,clear,cache_len,get,set,clear,cache_len",
        "doc/sphinxext/sphinx_issues.py:user_role,_make_issue_node,issue_role,setup",
        "doc/sphinxext/github_link.py:_get_git_revision,_linkcode_resolve,make_linkcode_resolve",
        "build_tools/circle/list_versions.py:json_urlread,human_readable_data_quantity,get_pdf_size",
        "sklearn/random_projection.py:johnson_lindenstrauss_min_dim,_check_density,_check_input_size,gaussian_random_matrix,sparse_random_matrix,BaseRandomProjection.__init__,BaseRandomProjection._make_random_matrix,BaseRandomProjection.fit,BaseRandomProjection.transform,GaussianRandomProjection.__init__,GaussianRandomProjection._make_random_matrix,SparseRandomProjection.__init__,SparseRandomProjection._make_random_matrix",
        "sklearn/dummy.py:DummyClassifier.__init__,DummyClassifier.fit,DummyClassifier.predict,DummyClassifier.predict_proba,DummyClassifier.predict_log_proba,DummyRegressor.__init__,DummyRegressor.fit,DummyRegressor.predict",
        "sklearn/__init__.py:get_config,set_config,config_context,setup_module",
        "sklearn/pipeline.py:Pipeline.__init__,Pipeline.get_params,Pipeline.set_params,Pipeline._validate_steps,Pipeline._estimator_type,Pipeline.named_steps,Pipeline._final_estimator,Pipeline._fit,Pipeline.fit,Pipeline.fit_transform,Pipeline.predict,Pipeline.fit_predict,Pipeline.predict_proba,Pipeline.decision_function,Pipeline.predict_log_proba,Pipeline.transform,Pipeline._transform,Pipeline.inverse_transform,Pipeline._inverse_transform,Pipeline.score,Pipeline.classes_,Pipeline._pairwise,_name_estimators,make_pipeline,_fit_one_transformer,_transform_one,_fit_transform_one,FeatureUnion.__init__,FeatureUnion.get_params,FeatureUnion.set_params,FeatureUnion._validate_transformers,FeatureUnion._iter,FeatureUnion.get_feature_names,FeatureUnion.fit,FeatureUnion.fit_transform,FeatureUnion.transform,FeatureUnion._update_transformer_list,make_union",
        "sklearn/calibration.py:CalibratedClassifierCV.__init__,CalibratedClassifierCV.fit,CalibratedClassifierCV.predict_proba,CalibratedClassifierCV.predict,_CalibratedClassifier.__init__,_CalibratedClassifier._preproc,_CalibratedClassifier.fit,_CalibratedClassifier.predict_proba,_sigmoid_calibration,_SigmoidCalibration.fit,_SigmoidCalibration.predict,calibration_curve,objective,grad",
        "sklearn/multioutput.py:_fit_estimator,_partial_fit_estimator,MultiOutputEstimator.__init__,MultiOutputEstimator.partial_fit,MultiOutputEstimator.fit,MultiOutputEstimator.predict,MultiOutputRegressor.__init__,MultiOutputRegressor.partial_fit,MultiOutputRegressor.score,MultiOutputClassifier.__init__,MultiOutputClassifier.predict_proba,MultiOutputClassifier.score,_BaseChain.__init__,_BaseChain.fit,_BaseChain.predict,ClassifierChain.fit,ClassifierChain.predict_proba,ClassifierChain.decision_function,RegressorChain.fit",
        "sklearn/setup.py:configuration",
        "sklearn/multiclass.py:_fit_binary,_partial_fit_binary,_predict_binary,_check_estimator,_ConstantPredictor.fit,_ConstantPredictor.predict,_ConstantPredictor.decision_function,_ConstantPredictor.predict_proba,OneVsRestClassifier.__init__,OneVsRestClassifier.fit,OneVsRestClassifier.partial_fit,OneVsRestClassifier.predict,OneVsRestClassifier.predict_proba,OneVsRestClassifier.decision_function,OneVsRestClassifier.multilabel_,OneVsRestClassifier.n_classes_,OneVsRestClassifier.coef_,OneVsRestClassifier.intercept_,OneVsRestClassifier._pairwise,OneVsRestClassifier._first_estimator,_fit_ovo_binary,_partial_fit_ovo_binary,OneVsOneClassifier.__init__,OneVsOneClassifier.fit,OneVsOneClassifier.partial_fit,OneVsOneClassifier.predict,OneVsOneClassifier.decision_function,OneVsOneClassifier.n_classes_,OneVsOneClassifier._pairwise,OutputCodeClassifier.__init__,OutputCodeClassifier.fit,OutputCodeClassifier.predict",
        "sklearn/cross_validation.py:_PartitionIterator.__init__,_PartitionIterator.__iter__,_PartitionIterator._iter_test_masks,_PartitionIterator._iter_test_indices,_PartitionIterator._empty_mask,LeaveOneOut._iter_test_indices,LeaveOneOut.__repr__,LeaveOneOut.__len__,LeavePOut.__init__,LeavePOut._iter_test_indices,LeavePOut.__repr__,LeavePOut.__len__,_BaseKFold.__init__,KFold.__init__,KFold._iter_test_indices,KFold.__repr__,KFold.__len__,LabelKFold.__init__,LabelKFold._iter_test_indices,LabelKFold.__repr__,LabelKFold.__len__,StratifiedKFold.__init__,StratifiedKFold._iter_test_masks,StratifiedKFold.__repr__,StratifiedKFold.__len__,LeaveOneLabelOut.__init__,LeaveOneLabelOut._iter_test_masks,LeaveOneLabelOut.__repr__,LeaveOneLabelOut.__len__,LeavePLabelOut.__init__,LeavePLabelOut._iter_test_masks,LeavePLabelOut.__repr__,LeavePLabelOut.__len__,BaseShuffleSplit.__init__,BaseShuffleSplit.__iter__,BaseShuffleSplit._iter_indices,ShuffleSplit._iter_indices,ShuffleSplit.__repr__,ShuffleSplit.__len__,_validate_shuffle_split,_approximate_mode,StratifiedShuffleSplit.__init__,StratifiedShuffleSplit._iter_indices,StratifiedShuffleSplit.__repr__,StratifiedShuffleSplit.__len__,PredefinedSplit.__init__,PredefinedSplit._iter_test_indices,PredefinedSplit.__repr__,PredefinedSplit.__len__,LabelShuffleSplit.__init__,LabelShuffleSplit.__repr__,LabelShuffleSplit.__len__,LabelShuffleSplit._iter_indices,_index_param_value,cross_val_predict,_fit_and_predict,_check_is_partition,cross_val_score,_fit_and_score,_safe_split,_score,_permutation_test_score,_shuffle,check_cv,permutation_test_score,train_test_split",
        "sklearn/kernel_approximation.py:RBFSampler.__init__,RBFSampler.fit,RBFSampler.transform,SkewedChi2Sampler.__init__,SkewedChi2Sampler.fit,SkewedChi2Sampler.transform,AdditiveChi2Sampler.__init__,AdditiveChi2Sampler.fit,AdditiveChi2Sampler.transform,AdditiveChi2Sampler._transform_dense,AdditiveChi2Sampler._transform_sparse,Nystroem.__init__,Nystroem.fit,Nystroem.transform,Nystroem._get_kernel_params",
        "sklearn/kernel_ridge.py:KernelRidge.__init__,KernelRidge._get_kernel,KernelRidge._pairwise,KernelRidge.fit,KernelRidge.predict",
        "sklearn/grid_search.py:ParameterGrid.__init__,ParameterGrid.__iter__,ParameterGrid.__len__,ParameterGrid.__getitem__,ParameterSampler.__init__,ParameterSampler.__iter__,ParameterSampler.__len__,fit_grid_point,_check_param_grid,_CVScoreTuple.__repr__,BaseSearchCV.__init__,BaseSearchCV._estimator_type,BaseSearchCV.classes_,BaseSearchCV.score,BaseSearchCV.predict,BaseSearchCV.predict_proba,BaseSearchCV.predict_log_proba,BaseSearchCV.decision_function,BaseSearchCV.transform,BaseSearchCV.inverse_transform,BaseSearchCV._fit,GridSearchCV.__init__,GridSearchCV.fit,RandomizedSearchCV.__init__,RandomizedSearchCV.fit",
        "sklearn/isotonic.py:check_increasing,isotonic_regression,IsotonicRegression.__init__,IsotonicRegression.X_,IsotonicRegression.X_,IsotonicRegression.X_,IsotonicRegression.y_,IsotonicRegression.y_,IsotonicRegression.y_,IsotonicRegression._check_fit_data,IsotonicRegression._build_f,IsotonicRegression._build_y,IsotonicRegression.fit,IsotonicRegression.transform,IsotonicRegression.predict,IsotonicRegression.__getstate__,IsotonicRegression.__setstate__",
        "sklearn/naive_bayes.py:BaseNB._joint_log_likelihood,BaseNB.predict,BaseNB.predict_log_proba,BaseNB.predict_proba,GaussianNB.__init__,GaussianNB.fit,GaussianNB._update_mean_variance,GaussianNB.partial_fit,GaussianNB._partial_fit,GaussianNB._joint_log_likelihood,BaseDiscreteNB._update_class_log_prior,BaseDiscreteNB._check_alpha,BaseDiscreteNB.partial_fit,BaseDiscreteNB.fit,BaseDiscreteNB._get_coef,BaseDiscreteNB._get_intercept,MultinomialNB.__init__,MultinomialNB._count,MultinomialNB._update_feature_log_prob,MultinomialNB._joint_log_likelihood,ComplementNB.__init__,ComplementNB._count,ComplementNB._update_feature_log_prob,ComplementNB._joint_log_likelihood,BernoulliNB.__init__,BernoulliNB._count,BernoulliNB._update_feature_log_prob,BernoulliNB._joint_log_likelihood",
        "sklearn/discriminant_analysis.py:_cov,_class_means,_class_cov,LinearDiscriminantAnalysis.__init__,LinearDiscriminantAnalysis._solve_lsqr,LinearDiscriminantAnalysis._solve_eigen,LinearDiscriminantAnalysis._solve_svd,LinearDiscriminantAnalysis.fit,LinearDiscriminantAnalysis.transform,LinearDiscriminantAnalysis.predict_proba,LinearDiscriminantAnalysis.predict_log_proba,QuadraticDiscriminantAnalysis.__init__,QuadraticDiscriminantAnalysis.covariances_,QuadraticDiscriminantAnalysis.fit,QuadraticDiscriminantAnalysis._decision_function,QuadraticDiscriminantAnalysis.decision_function,QuadraticDiscriminantAnalysis.predict,QuadraticDiscriminantAnalysis.predict_proba,QuadraticDiscriminantAnalysis.predict_log_proba",
        "sklearn/base.py:_first_and_last_element,clone,_pprint,BaseEstimator._get_param_names,BaseEstimator.get_params,BaseEstimator.set_params,BaseEstimator.__repr__,BaseEstimator.__getstate__,BaseEstimator.__setstate__,ClassifierMixin.score,RegressorMixin.score,ClusterMixin.fit_predict,BiclusterMixin.biclusters_,BiclusterMixin.get_indices,BiclusterMixin.get_shape,BiclusterMixin.get_submatrix,TransformerMixin.fit_transform,DensityMixin.score,is_classifier,is_regressor",
        "sklearn/learning_curve.py:learning_curve,_translate_train_sizes,_incremental_fit_estimator,validation_curve",
        "sklearn/preprocessing/_target.py:TransformedTargetRegressor.__init__,TransformedTargetRegressor._fit_transformer,TransformedTargetRegressor.fit,TransformedTargetRegressor.predict",
        "sklearn/preprocessing/label.py:LabelEncoder.fit,LabelEncoder.fit_transform,LabelEncoder.transform,LabelEncoder.inverse_transform,LabelBinarizer.__init__,LabelBinarizer.fit,LabelBinarizer.fit_transform,LabelBinarizer.transform,LabelBinarizer.inverse_transform,label_binarize,_inverse_binarize_multiclass,_inverse_binarize_thresholding,MultiLabelBinarizer.__init__,MultiLabelBinarizer.fit,MultiLabelBinarizer.fit_transform,MultiLabelBinarizer.transform,MultiLabelBinarizer._transform,MultiLabelBinarizer.inverse_transform",
        "sklearn/preprocessing/_function_transformer.py:_identity,FunctionTransformer.__init__,FunctionTransformer._check_inverse_transform,FunctionTransformer.fit,FunctionTransformer.transform,FunctionTransformer.inverse_transform,FunctionTransformer._transform",
        "sklearn/preprocessing/data.py:_handle_zeros_in_scale,scale,MinMaxScaler.__init__,MinMaxScaler._reset,MinMaxScaler.fit,MinMaxScaler.partial_fit,MinMaxScaler.transform,MinMaxScaler.inverse_transform,minmax_scale,StandardScaler.__init__,StandardScaler._reset,StandardScaler.fit,StandardScaler.partial_fit,StandardScaler.transform,StandardScaler.inverse_transform,MaxAbsScaler.__init__,MaxAbsScaler._reset,MaxAbsScaler.fit,MaxAbsScaler.partial_fit,MaxAbsScaler.transform,MaxAbsScaler.inverse_transform,maxabs_scale,RobustScaler.__init__,RobustScaler._check_array,RobustScaler.fit,RobustScaler.transform,RobustScaler.inverse_transform,robust_scale,PolynomialFeatures.__init__,PolynomialFeatures._combinations,PolynomialFeatures.powers_,PolynomialFeatures.get_feature_names,PolynomialFeatures.fit,PolynomialFeatures.transform,normalize,Normalizer.__init__,Normalizer.fit,Normalizer.transform,binarize,Binarizer.__init__,Binarizer.fit,Binarizer.transform,KernelCenterer.fit,KernelCenterer.transform,KernelCenterer._pairwise,add_dummy_feature,_transform_selected,OneHotEncoder.__init__,OneHotEncoder.fit,OneHotEncoder._fit_transform,OneHotEncoder.fit_transform,OneHotEncoder._transform,OneHotEncoder.transform,QuantileTransformer.__init__,QuantileTransformer._dense_fit,QuantileTransformer._sparse_fit,QuantileTransformer.fit,QuantileTransformer._transform_col,QuantileTransformer._check_inputs,QuantileTransformer._check_is_fitted,QuantileTransformer._transform,QuantileTransformer.transform,QuantileTransformer.inverse_transform,quantile_transform,PowerTransformer.__init__,PowerTransformer.fit,PowerTransformer.transform,PowerTransformer.inverse_transform,PowerTransformer._check_input,power_transform,CategoricalEncoder.__init__,CategoricalEncoder.fit,CategoricalEncoder.transform,CategoricalEncoder.inverse_transform",
        "sklearn/preprocessing/imputation.py:_get_mask,_most_frequent,Imputer.__init__,Imputer.fit,Imputer._sparse_fit,Imputer._dense_fit,Imputer.transform",
        "sklearn/neighbors/lof.py:LocalOutlierFactor.__init__,LocalOutlierFactor.fit_predict,LocalOutlierFactor.fit,LocalOutlierFactor._predict,LocalOutlierFactor._decision_function,LocalOutlierFactor._score_samples,LocalOutlierFactor._local_reachability_density",
        "sklearn/neighbors/unsupervised.py:NearestNeighbors.__init__",
        "sklearn/neighbors/setup.py:configuration",
        "sklearn/neighbors/kde.py:KernelDensity.__init__,KernelDensity._choose_algorithm,KernelDensity.fit,KernelDensity.score_samples,KernelDensity.score,KernelDensity.sample",
        "sklearn/neighbors/regression.py:KNeighborsRegressor.__init__,KNeighborsRegressor.predict,RadiusNeighborsRegressor.__init__,RadiusNeighborsRegressor.predict",
        "sklearn/neighbors/nearest_centroid.py:NearestCentroid.__init__,NearestCentroid.fit,NearestCentroid.predict",
        "sklearn/neighbors/approximate.py:_find_matching_indices,_find_longest_prefix_match,ProjectionToHashMixin._to_hash,ProjectionToHashMixin.fit_transform,ProjectionToHashMixin.transform,GaussianRandomProjectionHash.__init__,_array_of_arrays,LSHForest.__init__,LSHForest._compute_distances,LSHForest._generate_masks,LSHForest._get_candidates,LSHForest._get_radius_neighbors,LSHForest.fit,LSHForest._query,LSHForest.kneighbors,LSHForest.radius_neighbors,LSHForest.partial_fit",
        "sklearn/neighbors/graph.py:_check_params,_query_include_self,kneighbors_graph,radius_neighbors_graph",
        "sklearn/neighbors/base.py:_check_weights,_get_weights,NeighborsBase.__init__,NeighborsBase._check_algorithm_metric,NeighborsBase._fit,NeighborsBase._pairwise,KNeighborsMixin.kneighbors,KNeighborsMixin.kneighbors_graph,RadiusNeighborsMixin.radius_neighbors,RadiusNeighborsMixin.radius_neighbors_graph,SupervisedFloatMixin.fit,SupervisedIntegerMixin.fit,UnsupervisedMixin.fit",
        "sklearn/neighbors/classification.py:KNeighborsClassifier.__init__,KNeighborsClassifier.predict,KNeighborsClassifier.predict_proba,RadiusNeighborsClassifier.__init__,RadiusNeighborsClassifier.predict",
        "sklearn/tree/tree.py:BaseDecisionTree.__init__,BaseDecisionTree.fit,BaseDecisionTree._validate_X_predict,BaseDecisionTree.predict,BaseDecisionTree.apply,BaseDecisionTree.decision_path,BaseDecisionTree.feature_importances_,DecisionTreeClassifier.__init__,DecisionTreeClassifier.fit,DecisionTreeClassifier.predict_proba,DecisionTreeClassifier.predict_log_proba,DecisionTreeRegressor.__init__,DecisionTreeRegressor.fit,ExtraTreeClassifier.__init__,ExtraTreeRegressor.__init__",
        "sklearn/tree/export.py:_color_brew,Sentinel.__repr__,export_graphviz,get_color,node_to_str,recurse",
        "sklearn/tree/setup.py:configuration",
        "sklearn/_build_utils/__init__.py:get_blas_info,build_from_c_and_cpp_files,maybe_cythonize_extensions,atlas_not_found",
        "sklearn/gaussian_process/regression_models.py:constant,linear,quadratic",
        "sklearn/gaussian_process/kernels.py:_check_length_scale,Hyperparameter.__new__,Hyperparameter.__eq__,Kernel.get_params,Kernel.set_params,Kernel.clone_with_theta,Kernel.n_dims,Kernel.hyperparameters,Kernel.theta,Kernel.theta,Kernel.bounds,Kernel.__add__,Kernel.__radd__,Kernel.__mul__,Kernel.__rmul__,Kernel.__pow__,Kernel.__eq__,Kernel.__repr__,Kernel.__call__,Kernel.diag,Kernel.is_stationary,NormalizedKernelMixin.diag,StationaryKernelMixin.is_stationary,CompoundKernel.__init__,CompoundKernel.get_params,CompoundKernel.theta,CompoundKernel.theta,CompoundKernel.bounds,CompoundKernel.__call__,CompoundKernel.__eq__,CompoundKernel.is_stationary,CompoundKernel.diag,KernelOperator.__init__,KernelOperator.get_params,KernelOperator.hyperparameters,KernelOperator.theta,KernelOperator.theta,KernelOperator.bounds,KernelOperator.__eq__,KernelOperator.is_stationary,Sum.__call__,Sum.diag,Sum.__repr__,Product.__call__,Product.diag,Product.__repr__,Exponentiation.__init__,Exponentiation.get_params,Exponentiation.hyperparameters,Exponentiation.theta,Exponentiation.theta,Exponentiation.bounds,Exponentiation.__eq__,Exponentiation.__call__,Exponentiation.diag,Exponentiation.__repr__,Exponentiation.is_stationary,ConstantKernel.__init__,ConstantKernel.hyperparameter_constant_value,ConstantKernel.__call__,ConstantKernel.diag,ConstantKernel.__repr__,WhiteKernel.__init__,WhiteKernel.hyperparameter_noise_level,WhiteKernel.__call__,WhiteKernel.diag,WhiteKernel.__repr__,RBF.__init__,RBF.anisotropic,RBF.hyperparameter_length_scale,RBF.__call__,RBF.__repr__,Matern.__init__,Matern.__call__,Matern.__repr__,RationalQuadratic.__init__,RationalQuadratic.hyperparameter_length_scale,RationalQuadratic.hyperparameter_alpha,RationalQuadratic.__call__,RationalQuadratic.__repr__,ExpSineSquared.__init__,ExpSineSquared.hyperparameter_length_scale,ExpSineSquared.hyperparameter_periodicity,ExpSineSquared.__call__,ExpSineSquared.__repr__,DotProduct.__init__,DotProduct.hyperparameter_sigma_0,DotProduct.__call__,DotProduct.diag,DotProduct.is_stationary,DotProduct.__repr__,_approx_fprime,PairwiseKernel.__init__,PairwiseKernel.hyperparameter_gamma,PairwiseKernel.__call__,PairwiseKernel.diag,PairwiseKernel.is_stationary,PairwiseKernel.__repr__,f,f",
        "sklearn/gaussian_process/gpr.py:GaussianProcessRegressor.__init__,GaussianProcessRegressor.rng,GaussianProcessRegressor.y_train_mean,GaussianProcessRegressor.fit,GaussianProcessRegressor.predict,GaussianProcessRegressor.sample_y,GaussianProcessRegressor.log_marginal_likelihood,GaussianProcessRegressor._constrained_optimization,obj_func",
        "sklearn/gaussian_process/gpc.py:_BinaryGaussianProcessClassifierLaplace.__init__,_BinaryGaussianProcessClassifierLaplace.fit,_BinaryGaussianProcessClassifierLaplace.predict,_BinaryGaussianProcessClassifierLaplace.predict_proba,_BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood,_BinaryGaussianProcessClassifierLaplace._posterior_mode,_BinaryGaussianProcessClassifierLaplace._constrained_optimization,GaussianProcessClassifier.__init__,GaussianProcessClassifier.fit,GaussianProcessClassifier.predict,GaussianProcessClassifier.predict_proba,GaussianProcessClassifier.kernel_,GaussianProcessClassifier.log_marginal_likelihood,obj_func",
        "sklearn/gaussian_process/gaussian_process.py:l1_cross_distances,GaussianProcess.__init__,GaussianProcess.fit,GaussianProcess.predict,GaussianProcess.reduced_likelihood_function,GaussianProcess._arg_max_reduced_likelihood_function,GaussianProcess._check_params,minus_reduced_likelihood_function,corr_cut",
        "sklearn/gaussian_process/correlation_models.py:absolute_exponential,squared_exponential,generalized_exponential,pure_nugget,cubic,linear",
        "sklearn/manifold/setup.py:configuration",
        "sklearn/manifold/isomap.py:Isomap.__init__,Isomap._fit_transform,Isomap.reconstruction_error,Isomap.fit,Isomap.fit_transform,Isomap.transform",
        "sklearn/manifold/mds.py:_smacof_single,smacof,MDS.__init__,MDS._pairwise,MDS.fit,MDS.fit_transform",
        "sklearn/manifold/locally_linear.py:barycenter_weights,barycenter_kneighbors_graph,null_space,locally_linear_embedding,LocallyLinearEmbedding.__init__,LocallyLinearEmbedding._fit_transform,LocallyLinearEmbedding.fit,LocallyLinearEmbedding.fit_transform,LocallyLinearEmbedding.transform",
        "sklearn/manifold/spectral_embedding_.py:_graph_connected_component,_graph_is_connected,_set_diag,spectral_embedding,SpectralEmbedding.__init__,SpectralEmbedding._pairwise,SpectralEmbedding._get_affinity_matrix,SpectralEmbedding.fit,SpectralEmbedding.fit_transform",
        "sklearn/manifold/t_sne.py:_joint_probabilities,_joint_probabilities_nn,_kl_divergence,_kl_divergence_bh,_gradient_descent,trustworthiness,TSNE.__init__,TSNE._fit,TSNE.n_iter_final,TSNE._tsne,TSNE.fit_transform,TSNE.fit",
        "sklearn/externals/setup.py:configuration",
        "sklearn/externals/six.py:_add_doc,_import_module,_LazyDescr.__init__,_LazyDescr.__get__,MovedModule.__init__,MovedModule._resolve,MovedAttribute.__init__,MovedAttribute._resolve,add_move,remove_move,iterkeys,itervalues,iteritems,iterlists,with_metaclass,add_metaclass,get_unbound_function,get_unbound_function,create_bound_method,Iterator.next,b,u,b,u,byte2int,indexbytes,iterbytes,reraise,exec_,print_,wrapper,X.__len__,advance_iterator,callable,int2byte,write",
        "sklearn/externals/funcsigs.py:formatannotation,_get_user_defined_method,signature,_ParameterKind.__new__,_ParameterKind.__str__,_ParameterKind.__repr__,Parameter.__init__,Parameter.name,Parameter.default,Parameter.annotation,Parameter.kind,Parameter.replace,Parameter.__str__,Parameter.__repr__,Parameter.__hash__,Parameter.__eq__,Parameter.__ne__,BoundArguments.__init__,BoundArguments.signature,BoundArguments.args,BoundArguments.kwargs,BoundArguments.__hash__,BoundArguments.__eq__,BoundArguments.__ne__,Signature.__init__,Signature.from_function,Signature.parameters,Signature.return_annotation,Signature.replace,Signature.__hash__,Signature.__eq__,Signature.__ne__,Signature._bind,Signature.bind,Signature.bind_partial,Signature.__str__",
        "sklearn/externals/_pilutil.py:bytescale,imread,imsave,fromimage,toimage,imresize",
        "sklearn/externals/conftest.py:pytest_ignore_collect",
        "sklearn/externals/joblib/my_exceptions.py:JoblibException.__init__,JoblibException.__repr__,TransportableException.__init__,_mk_exception,_mk_common_exceptions",
        "sklearn/externals/joblib/_compat.py:with_metaclass",
        "sklearn/externals/joblib/parallel.py:get_active_backend,parallel_backend,BatchedCalls.__init__,BatchedCalls.__call__,BatchedCalls.__len__,cpu_count,_verbosity_filter,delayed,BatchCompletionCallBack.__init__,BatchCompletionCallBack.__call__,register_parallel_backend,effective_n_jobs,Parallel.__init__,Parallel.__enter__,Parallel.__exit__,Parallel._initialize_backend,Parallel._effective_n_jobs,Parallel._terminate_backend,Parallel._dispatch,Parallel.dispatch_next,Parallel.dispatch_one_batch,Parallel._print,Parallel.print_progress,Parallel.retrieve,Parallel.__call__,Parallel.__repr__,delayed_function",
        "sklearn/externals/joblib/_parallel_backends.py:ParallelBackendBase.effective_n_jobs,ParallelBackendBase.apply_async,ParallelBackendBase.configure,ParallelBackendBase.terminate,ParallelBackendBase.compute_batch_size,ParallelBackendBase.batch_completed,ParallelBackendBase.get_exceptions,ParallelBackendBase.abort_everything,SequentialBackend.effective_n_jobs,SequentialBackend.apply_async,PoolManagerMixin.effective_n_jobs,PoolManagerMixin.terminate,PoolManagerMixin.apply_async,PoolManagerMixin.abort_everything,AutoBatchingMixin.compute_batch_size,AutoBatchingMixin.batch_completed,ThreadingBackend.configure,MultiprocessingBackend.effective_n_jobs,MultiprocessingBackend.configure,MultiprocessingBackend.terminate,ImmediateResult.__init__,ImmediateResult.get,SafeFunction.__init__,SafeFunction.__call__,FallbackToBackend.__init__",
        "sklearn/externals/joblib/memory.py:extract_first_line,_get_func_fullname,_cache_key_to_dir,_load_output,_get_cache_items,_get_cache_items_to_delete,concurrency_safe_write,MemorizedResult.__init__,MemorizedResult.get,MemorizedResult.clear,MemorizedResult.__repr__,MemorizedResult.__reduce__,NotMemorizedResult.__init__,NotMemorizedResult.get,NotMemorizedResult.clear,NotMemorizedResult.__repr__,NotMemorizedResult.__getstate__,NotMemorizedResult.__setstate__,NotMemorizedFunc.__init__,NotMemorizedFunc.__call__,NotMemorizedFunc.call_and_shelve,NotMemorizedFunc.__reduce__,NotMemorizedFunc.__repr__,NotMemorizedFunc.clear,MemorizedFunc.__init__,MemorizedFunc._cached_call,MemorizedFunc.call_and_shelve,MemorizedFunc.__call__,MemorizedFunc.__reduce__,MemorizedFunc._get_argument_hash,MemorizedFunc._get_output_dir,MemorizedFunc._get_func_dir,MemorizedFunc._hash_func,MemorizedFunc._write_func_code,MemorizedFunc._check_previous_func_code,MemorizedFunc.clear,MemorizedFunc.call,MemorizedFunc._persist_output,MemorizedFunc._persist_input,MemorizedFunc.__repr__,Memory.__init__,Memory.cache,Memory.clear,Memory.reduce_size,Memory.eval,Memory.__repr__,Memory.__reduce__,write_func",
        "sklearn/externals/joblib/backports.py:make_memmap,concurrency_safe_rename,make_memmap,replace",
        "sklearn/externals/joblib/_memory_helpers.py:_get_normal_name,_detect_encoding,open_py_source,read_or_stop,find_cookie",
        "sklearn/externals/joblib/numpy_pickle_compat.py:hex_str,read_zfile,write_zfile,NDArrayWrapper.__init__,NDArrayWrapper.read,ZNDArrayWrapper.__init__,ZNDArrayWrapper.read,ZipNumpyUnpickler.__init__,ZipNumpyUnpickler._open_pickle,ZipNumpyUnpickler.load_build,load_compatibility,asbytes",
        "sklearn/externals/joblib/pool.py:_get_backing_memmap,has_shareable_memory,_strided_from_memmap,_reduce_memmap_backed,reduce_memmap,ArrayMemmapReducer.__init__,ArrayMemmapReducer.__call__,CustomizablePickler.__init__,CustomizablePickler.register,CustomizablePicklingQueue.__init__,CustomizablePicklingQueue.__getstate__,CustomizablePicklingQueue.__setstate__,CustomizablePicklingQueue.empty,CustomizablePicklingQueue._make_methods,PicklingPool.__init__,PicklingPool._setup_queues,delete_folder,MemmapingPool.__init__,MemmapingPool.terminate,get,_cleanup,dispatcher,send,put",
        "sklearn/externals/joblib/logger.py:_squeeze_time,format_time,short_format_time,pformat,Logger.__init__,Logger.warn,Logger.debug,Logger.format,PrintTime.__init__,PrintTime.__call__",
        "sklearn/externals/joblib/disk.py:disk_used,memstr_to_bytes,mkdirp,rm_subdirs",
        "sklearn/externals/joblib/format_stack.py:safe_repr,eq_repr,uniq_stable,fix_frame_records_filenames,_fixed_getframes,_format_traceback_lines,format_records,format_exc,format_outer_frames,tokeneater,linereader",
        "sklearn/externals/joblib/numpy_pickle.py:NumpyArrayWrapper.__init__,NumpyArrayWrapper.write_array,NumpyArrayWrapper.read_array,NumpyArrayWrapper.read_mmap,NumpyArrayWrapper.read,NumpyPickler.__init__,NumpyPickler._create_array_wrapper,NumpyPickler.save,NumpyUnpickler.__init__,NumpyUnpickler.load_build,dump,_unpickle,load",
        "sklearn/externals/joblib/hashing.py:_ConsistentSet.__init__,_MyHash.__init__,Hasher.__init__,Hasher.hash,Hasher.save,Hasher.memoize,Hasher.save_global,Hasher._batch_setitems,Hasher.save_set,NumpyHasher.__init__,NumpyHasher.save,hash",
        "sklearn/externals/joblib/numpy_pickle_utils.py:_is_raw_file,_detect_compressor,_buffered_read_file,_buffered_write_file,_read_fileobject,_write_fileobject,BinaryZlibFile.__init__,BinaryZlibFile.close,BinaryZlibFile.closed,BinaryZlibFile.fileno,BinaryZlibFile.seekable,BinaryZlibFile.readable,BinaryZlibFile.writable,BinaryZlibFile._check_not_closed,BinaryZlibFile._check_can_read,BinaryZlibFile._check_can_write,BinaryZlibFile._check_can_seek,BinaryZlibFile._fill_buffer,BinaryZlibFile._read_all,BinaryZlibFile._read_block,BinaryZlibFile.read,BinaryZlibFile.readinto,BinaryZlibFile.write,BinaryZlibFile._rewind,BinaryZlibFile.seek,BinaryZlibFile.tell,_read_bytes",
        "sklearn/externals/joblib/func_inspect.py:get_func_code,_clean_win_chars,get_func_name,getfullargspec,_signature_str,_function_called_str,filter_args,_format_arg,format_signature,format_call",
        "sklearn/cluster/bicluster.py:_scale_normalize,_bistochastic_normalize,_log_normalize,BaseSpectral.__init__,BaseSpectral._check_parameters,BaseSpectral.fit,BaseSpectral._svd,BaseSpectral._k_means,SpectralCoclustering.__init__,SpectralCoclustering._fit,SpectralBiclustering.__init__,SpectralBiclustering._check_parameters,SpectralBiclustering._fit,SpectralBiclustering._fit_best_piecewise,SpectralBiclustering._project_and_cluster,make_piecewise",
        "sklearn/cluster/hierarchical.py:_fix_connectivity,_single_linkage_tree,ward_tree,linkage_tree,_complete_linkage,_average_linkage,_single_linkage,_hc_cut,AgglomerativeClustering.__init__,AgglomerativeClustering.fit,FeatureAgglomeration.__init__,FeatureAgglomeration.fit,FeatureAgglomeration.fit_predict",
        "sklearn/cluster/birch.py:_iterate_sparse_X,_split_node,_CFNode.__init__,_CFNode.append_subcluster,_CFNode.update_split_subclusters,_CFNode.insert_cf_subcluster,_CFSubcluster.__init__,_CFSubcluster.update,_CFSubcluster.merge_subcluster,_CFSubcluster.radius,Birch.__init__,Birch.fit,Birch._fit,Birch._get_leaves,Birch.partial_fit,Birch._check_fit,Birch.predict,Birch.transform,Birch._global_clustering",
        "sklearn/cluster/setup.py:configuration",
        "sklearn/cluster/mean_shift_.py:estimate_bandwidth,_mean_shift_single_seed,mean_shift,get_bin_seeds,MeanShift.__init__,MeanShift.fit,MeanShift.predict",
        "sklearn/cluster/affinity_propagation_.py:_equal_similarities_and_preferences,affinity_propagation,AffinityPropagation.__init__,AffinityPropagation._pairwise,AffinityPropagation.fit,AffinityPropagation.predict,all_equal_preferences,all_equal_similarities",
        "sklearn/cluster/k_means_.py:_k_init,_validate_center_shape,_tolerance,k_means,_kmeans_single_elkan,_kmeans_single_lloyd,_labels_inertia_precompute_dense,_labels_inertia,_init_centroids,KMeans.__init__,KMeans._check_test_data,KMeans.fit,KMeans.fit_predict,KMeans.fit_transform,KMeans.transform,KMeans._transform,KMeans.predict,KMeans.score,_mini_batch_step,_mini_batch_convergence,MiniBatchKMeans.__init__,MiniBatchKMeans.fit,MiniBatchKMeans._labels_inertia_minibatch,MiniBatchKMeans.partial_fit,MiniBatchKMeans.predict",
        "sklearn/cluster/_feature_agglomeration.py:AgglomerationTransform.transform,AgglomerationTransform.inverse_transform",
        "sklearn/cluster/spectral.py:discretize,spectral_clustering,SpectralClustering.__init__,SpectralClustering.fit,SpectralClustering._pairwise",
        "sklearn/cluster/dbscan_.py:dbscan,DBSCAN.__init__,DBSCAN.fit,DBSCAN.fit_predict",
        "sklearn/datasets/twenty_newsgroups.py:download_20newsgroups,strip_newsgroup_header,strip_newsgroup_quoting,strip_newsgroup_footer,fetch_20newsgroups,fetch_20newsgroups_vectorized",
        "sklearn/datasets/olivetti_faces.py:fetch_olivetti_faces",
        "sklearn/datasets/species_distributions.py:_load_coverage,_load_csv,construct_grids,fetch_species_distributions",
        "sklearn/datasets/setup.py:configuration",
        "sklearn/datasets/mlcomp.py:_load_document_classification,load_mlcomp",
        "sklearn/datasets/lfw.py:scale_face,check_fetch_lfw,_load_imgs,_fetch_lfw_people,fetch_lfw_people,_fetch_lfw_pairs,fetch_lfw_pairs",
        "sklearn/datasets/california_housing.py:fetch_california_housing",
        "sklearn/datasets/rcv1.py:fetch_rcv1,_inverse_permutation,_find_permutation",
        "sklearn/datasets/samples_generator.py:_generate_hypercube,make_classification,make_multilabel_classification,make_hastie_10_2,make_regression,make_circles,make_moons,make_blobs,make_friedman1,make_friedman2,make_friedman3,make_low_rank_matrix,make_sparse_coded_signal,make_sparse_uncorrelated,make_spd_matrix,make_sparse_spd_matrix,make_swiss_roll,make_s_curve,make_gaussian_quantiles,_shuffle,make_biclusters,make_checkerboard,sample_example",
        "sklearn/datasets/mldata.py:mldata_filename,fetch_mldata,setup_module,teardown_module",
        "sklearn/datasets/kddcup99.py:fetch_kddcup99,_fetch_brute_kddcup99,_mkdirp",
        "sklearn/datasets/svmlight_format.py:load_svmlight_file,_gen_open,_open_and_load,load_svmlight_files,_dump_svmlight,dump_svmlight_file",
        "sklearn/datasets/base.py:get_data_home,clear_data_home,load_files,load_data,load_wine,load_iris,load_breast_cancer,load_digits,load_diabetes,load_linnerud,load_boston,load_sample_images,load_sample_image,_pkl_filepath,_sha256,_fetch_remote",
        "sklearn/datasets/covtype.py:fetch_covtype",
        "sklearn/feature_extraction/setup.py:configuration",
        "sklearn/feature_extraction/image.py:_make_edges_3d,_compute_gradient_3d,_mask_edges_weights,_to_graph,img_to_graph,grid_to_graph,_compute_n_patches,extract_patches,extract_patches_2d,reconstruct_from_patches_2d,PatchExtractor.__init__,PatchExtractor.fit,PatchExtractor.transform",
        "sklearn/feature_extraction/hashing.py:_iteritems,FeatureHasher.__init__,FeatureHasher._validate_params,FeatureHasher.fit,FeatureHasher.transform",
        "sklearn/feature_extraction/text.py:strip_accents_unicode,strip_accents_ascii,strip_tags,_check_stop_list,VectorizerMixin.decode,VectorizerMixin._word_ngrams,VectorizerMixin._char_ngrams,VectorizerMixin._char_wb_ngrams,VectorizerMixin.build_preprocessor,VectorizerMixin.build_tokenizer,VectorizerMixin.get_stop_words,VectorizerMixin.build_analyzer,VectorizerMixin._validate_vocabulary,VectorizerMixin._check_vocabulary,HashingVectorizer.__init__,HashingVectorizer.partial_fit,HashingVectorizer.fit,HashingVectorizer.transform,HashingVectorizer._get_hasher,_document_frequency,CountVectorizer.__init__,CountVectorizer._sort_features,CountVectorizer._limit_features,CountVectorizer._count_vocab,CountVectorizer.fit,CountVectorizer.fit_transform,CountVectorizer.transform,CountVectorizer.inverse_transform,CountVectorizer.get_feature_names,_make_int_array,TfidfTransformer.__init__,TfidfTransformer.fit,TfidfTransformer.transform,TfidfTransformer.idf_,TfidfVectorizer.__init__,TfidfVectorizer.norm,TfidfVectorizer.norm,TfidfVectorizer.use_idf,TfidfVectorizer.use_idf,TfidfVectorizer.smooth_idf,TfidfVectorizer.smooth_idf,TfidfVectorizer.sublinear_tf,TfidfVectorizer.sublinear_tf,TfidfVectorizer.idf_,TfidfVectorizer.fit,TfidfVectorizer.fit_transform,TfidfVectorizer.transform",
        "sklearn/feature_extraction/dict_vectorizer.py:_tosequence,DictVectorizer.__init__,DictVectorizer.fit,DictVectorizer._transform,DictVectorizer.fit_transform,DictVectorizer.inverse_transform,DictVectorizer.transform,DictVectorizer.get_feature_names,DictVectorizer.restrict",
        "sklearn/mixture/gmm.py:log_multivariate_normal_density,sample_gaussian,_sample_gaussian,_GMMBase.__init__,_GMMBase._get_covars,_GMMBase._set_covars,_GMMBase.score_samples,_GMMBase.score,_GMMBase.predict,_GMMBase.predict_proba,_GMMBase.sample,_GMMBase.fit_predict,_GMMBase._fit,_GMMBase.fit,_GMMBase._do_mstep,_GMMBase._n_parameters,_GMMBase.bic,_GMMBase.aic,GMM.__init__,_log_multivariate_normal_density_diag,_log_multivariate_normal_density_spherical,_log_multivariate_normal_density_tied,_log_multivariate_normal_density_full,_validate_covars,distribute_covar_matrix_to_match_covariance_type,_covar_mstep_diag,_covar_mstep_spherical,_covar_mstep_full,_covar_mstep_tied",
        "sklearn/mixture/bayesian_mixture.py:_log_dirichlet_norm,_log_wishart_norm,BayesianGaussianMixture.__init__,BayesianGaussianMixture._check_parameters,BayesianGaussianMixture._check_weights_parameters,BayesianGaussianMixture._check_means_parameters,BayesianGaussianMixture._check_precision_parameters,BayesianGaussianMixture._checkcovariance_prior_parameter,BayesianGaussianMixture._initialize,BayesianGaussianMixture._estimate_weights,BayesianGaussianMixture._estimate_means,BayesianGaussianMixture._estimate_precisions,BayesianGaussianMixture._estimate_wishart_full,BayesianGaussianMixture._estimate_wishart_tied,BayesianGaussianMixture._estimate_wishart_diag,BayesianGaussianMixture._estimate_wishart_spherical,BayesianGaussianMixture._check_is_fitted,BayesianGaussianMixture._m_step,BayesianGaussianMixture._estimate_log_weights,BayesianGaussianMixture._estimate_log_prob,BayesianGaussianMixture._compute_lower_bound,BayesianGaussianMixture._get_parameters,BayesianGaussianMixture._set_parameters",
        "sklearn/mixture/gaussian_mixture.py:_check_weights,_check_means,_check_precision_positivity,_check_precision_matrix,_check_precisions_full,_check_precisions,_estimate_gaussian_covariances_full,_estimate_gaussian_covariances_tied,_estimate_gaussian_covariances_diag,_estimate_gaussian_covariances_spherical,_estimate_gaussian_parameters,_compute_precision_cholesky,_compute_log_det_cholesky,_estimate_log_gaussian_prob,GaussianMixture.__init__,GaussianMixture._check_parameters,GaussianMixture._initialize,GaussianMixture._m_step,GaussianMixture._estimate_log_prob,GaussianMixture._estimate_log_weights,GaussianMixture._compute_lower_bound,GaussianMixture._check_is_fitted,GaussianMixture._get_parameters,GaussianMixture._set_parameters,GaussianMixture._n_parameters,GaussianMixture.bic,GaussianMixture.aic",
        "sklearn/mixture/base.py:_check_shape,_check_X,BaseMixture.__init__,BaseMixture._check_initial_parameters,BaseMixture._check_parameters,BaseMixture._initialize_parameters,BaseMixture._initialize,BaseMixture.fit,BaseMixture._e_step,BaseMixture._m_step,BaseMixture._check_is_fitted,BaseMixture._get_parameters,BaseMixture._set_parameters,BaseMixture.score_samples,BaseMixture.score,BaseMixture.predict,BaseMixture.predict_proba,BaseMixture.sample,BaseMixture._estimate_weighted_log_prob,BaseMixture._estimate_log_weights,BaseMixture._estimate_log_prob,BaseMixture._estimate_log_prob_resp,BaseMixture._print_verbose_msg_init_beg,BaseMixture._print_verbose_msg_iter_end,BaseMixture._print_verbose_msg_init_end",
        "sklearn/mixture/dpgmm.py:digamma,gammaln,log_normalize,wishart_log_det,wishart_logz,_bound_wishart,_sym_quad_form,_bound_state_log_lik,_DPGMMBase.__init__,_DPGMMBase._get_precisions,_DPGMMBase._get_covars,_DPGMMBase._set_covars,_DPGMMBase.score_samples,_DPGMMBase._update_concentration,_DPGMMBase._update_means,_DPGMMBase._update_precisions,_DPGMMBase._monitor,_DPGMMBase._do_mstep,_DPGMMBase._initialize_gamma,_DPGMMBase._bound_concentration,_DPGMMBase._bound_means,_DPGMMBase._bound_precisions,_DPGMMBase._bound_proportions,_DPGMMBase._logprior,_DPGMMBase.lower_bound,_DPGMMBase._set_weights,_DPGMMBase._fit,DPGMM.__init__,VBGMM.__init__,VBGMM._fit,VBGMM.score_samples,VBGMM._update_concentration,VBGMM._initialize_gamma,VBGMM._bound_proportions,VBGMM._bound_concentration,VBGMM._monitor,VBGMM._set_weights",
        "sklearn/ensemble/iforest.py:IsolationForest.__init__,IsolationForest._set_oob_score,IsolationForest.fit,IsolationForest.predict,IsolationForest.decision_function,IsolationForest.score_samples,IsolationForest.threshold_,_average_path_length",
        "sklearn/ensemble/setup.py:configuration",
        "sklearn/ensemble/bagging.py:_generate_indices,_generate_bagging_indices,_parallel_build_estimators,_parallel_predict_proba,_parallel_predict_log_proba,_parallel_decision_function,_parallel_predict_regression,BaseBagging.__init__,BaseBagging.fit,BaseBagging._fit,BaseBagging._set_oob_score,BaseBagging._validate_y,BaseBagging._get_estimators_indices,BaseBagging.estimators_samples_,BaggingClassifier.__init__,BaggingClassifier._validate_estimator,BaggingClassifier._set_oob_score,BaggingClassifier._validate_y,BaggingClassifier.predict,BaggingClassifier.predict_proba,BaggingClassifier.predict_log_proba,BaggingClassifier.decision_function,BaggingRegressor.__init__,BaggingRegressor.predict,BaggingRegressor._validate_estimator,BaggingRegressor._set_oob_score",
        "sklearn/ensemble/voting_classifier.py:_parallel_fit_estimator,VotingClassifier.__init__,VotingClassifier.named_estimators,VotingClassifier.fit,VotingClassifier._weights_not_none,VotingClassifier.predict,VotingClassifier._collect_probas,VotingClassifier._predict_proba,VotingClassifier.predict_proba,VotingClassifier.transform,VotingClassifier.set_params,VotingClassifier.get_params,VotingClassifier._predict",
        "sklearn/ensemble/gradient_boosting.py:QuantileEstimator.__init__,QuantileEstimator.fit,QuantileEstimator.predict,MeanEstimator.fit,MeanEstimator.predict,LogOddsEstimator.fit,LogOddsEstimator.predict,PriorProbabilityEstimator.fit,PriorProbabilityEstimator.predict,ZeroEstimator.fit,ZeroEstimator.predict,LossFunction.__init__,LossFunction.init_estimator,LossFunction.__call__,LossFunction.negative_gradient,LossFunction.update_terminal_regions,LossFunction._update_terminal_region,RegressionLossFunction.__init__,LeastSquaresError.init_estimator,LeastSquaresError.__call__,LeastSquaresError.negative_gradient,LeastSquaresError.update_terminal_regions,LeastSquaresError._update_terminal_region,LeastAbsoluteError.init_estimator,LeastAbsoluteError.__call__,LeastAbsoluteError.negative_gradient,LeastAbsoluteError._update_terminal_region,HuberLossFunction.__init__,HuberLossFunction.init_estimator,HuberLossFunction.__call__,HuberLossFunction.negative_gradient,HuberLossFunction._update_terminal_region,QuantileLossFunction.__init__,QuantileLossFunction.init_estimator,QuantileLossFunction.__call__,QuantileLossFunction.negative_gradient,QuantileLossFunction._update_terminal_region,ClassificationLossFunction._score_to_proba,ClassificationLossFunction._score_to_decision,BinomialDeviance.__init__,BinomialDeviance.init_estimator,BinomialDeviance.__call__,BinomialDeviance.negative_gradient,BinomialDeviance._update_terminal_region,BinomialDeviance._score_to_proba,BinomialDeviance._score_to_decision,MultinomialDeviance.__init__,MultinomialDeviance.init_estimator,MultinomialDeviance.__call__,MultinomialDeviance.negative_gradient,MultinomialDeviance._update_terminal_region,MultinomialDeviance._score_to_proba,MultinomialDeviance._score_to_decision,ExponentialLoss.__init__,ExponentialLoss.init_estimator,ExponentialLoss.__call__,ExponentialLoss.negative_gradient,ExponentialLoss._update_terminal_region,ExponentialLoss._score_to_proba,ExponentialLoss._score_to_decision,VerboseReporter.__init__,VerboseReporter.init,VerboseReporter.update,BaseGradientBoosting.__init__,BaseGradientBoosting._fit_stage,BaseGradientBoosting._check_params,BaseGradientBoosting._init_state,BaseGradientBoosting._clear_state,BaseGradientBoosting._resize_state,BaseGradientBoosting._is_initialized,BaseGradientBoosting._check_initialized,BaseGradientBoosting.n_features,BaseGradientBoosting.fit,BaseGradientBoosting._fit_stages,BaseGradientBoosting._make_estimator,BaseGradientBoosting._init_decision_function,BaseGradientBoosting._decision_function,BaseGradientBoosting._staged_decision_function,BaseGradientBoosting.feature_importances_,BaseGradientBoosting._validate_y,BaseGradientBoosting.apply,GradientBoostingClassifier.__init__,GradientBoostingClassifier._validate_y,GradientBoostingClassifier.decision_function,GradientBoostingClassifier.staged_decision_function,GradientBoostingClassifier.predict,GradientBoostingClassifier.staged_predict,GradientBoostingClassifier.predict_proba,GradientBoostingClassifier.predict_log_proba,GradientBoostingClassifier.staged_predict_proba,GradientBoostingRegressor.__init__,GradientBoostingRegressor.predict,GradientBoostingRegressor.staged_predict,GradientBoostingRegressor.apply",
        "sklearn/ensemble/forest.py:_generate_sample_indices,_generate_unsampled_indices,_parallel_build_trees,BaseForest.__init__,BaseForest.apply,BaseForest.decision_path,BaseForest.fit,BaseForest._set_oob_score,BaseForest._validate_y_class_weight,BaseForest._validate_X_predict,BaseForest.feature_importances_,accumulate_prediction,ForestClassifier.__init__,ForestClassifier._set_oob_score,ForestClassifier._validate_y_class_weight,ForestClassifier.predict,ForestClassifier.predict_proba,ForestClassifier.predict_log_proba,ForestRegressor.__init__,ForestRegressor.predict,ForestRegressor._set_oob_score,RandomForestClassifier.__init__,RandomForestRegressor.__init__,ExtraTreesClassifier.__init__,ExtraTreesRegressor.__init__,RandomTreesEmbedding.__init__,RandomTreesEmbedding._set_oob_score,RandomTreesEmbedding.fit,RandomTreesEmbedding.fit_transform,RandomTreesEmbedding.transform",
        "sklearn/ensemble/weight_boosting.py:BaseWeightBoosting.__init__,BaseWeightBoosting.fit,BaseWeightBoosting._boost,BaseWeightBoosting.staged_score,BaseWeightBoosting.feature_importances_,BaseWeightBoosting._validate_X_predict,_samme_proba,AdaBoostClassifier.__init__,AdaBoostClassifier.fit,AdaBoostClassifier._validate_estimator,AdaBoostClassifier._boost,AdaBoostClassifier._boost_real,AdaBoostClassifier._boost_discrete,AdaBoostClassifier.predict,AdaBoostClassifier.staged_predict,AdaBoostClassifier.decision_function,AdaBoostClassifier.staged_decision_function,AdaBoostClassifier.predict_proba,AdaBoostClassifier.staged_predict_proba,AdaBoostClassifier.predict_log_proba,AdaBoostRegressor.__init__,AdaBoostRegressor.fit,AdaBoostRegressor._validate_estimator,AdaBoostRegressor._boost,AdaBoostRegressor._get_median_predict,AdaBoostRegressor.predict,AdaBoostRegressor.staged_predict",
        "sklearn/ensemble/partial_dependence.py:_grid_from_X,partial_dependence,plot_partial_dependence,convert_feature",
        "sklearn/ensemble/base.py:_set_random_states,BaseEnsemble.__init__,BaseEnsemble._validate_estimator,BaseEnsemble._make_estimator,BaseEnsemble.__len__,BaseEnsemble.__getitem__,BaseEnsemble.__iter__,_partition_estimators",
        "sklearn/__check_build/__init__.py:raise_build_error",
        "sklearn/__check_build/setup.py:configuration",
        "sklearn/covariance/robust_covariance.py:c_step,_c_step,select_candidates,fast_mcd,MinCovDet.__init__,MinCovDet.fit,MinCovDet.correct_covariance,MinCovDet.reweight_covariance",
        "sklearn/covariance/graph_lasso_.py:_objective,_dual_gap,alpha_max,graph_lasso,GraphLasso.__init__,GraphLasso.fit,graph_lasso_path,GraphLassoCV.__init__,GraphLassoCV.grid_scores,GraphLassoCV.fit",
        "sklearn/covariance/elliptic_envelope.py:EllipticEnvelope.__init__,EllipticEnvelope.fit,EllipticEnvelope.decision_function,EllipticEnvelope.score_samples,EllipticEnvelope.predict,EllipticEnvelope.score,EllipticEnvelope.threshold_",
        "sklearn/covariance/shrunk_covariance_.py:shrunk_covariance,ShrunkCovariance.__init__,ShrunkCovariance.fit,ledoit_wolf_shrinkage,ledoit_wolf,LedoitWolf.__init__,LedoitWolf.fit,oas,OAS.fit",
        "sklearn/covariance/empirical_covariance_.py:log_likelihood,empirical_covariance,EmpiricalCovariance.__init__,EmpiricalCovariance._set_covariance,EmpiricalCovariance.get_precision,EmpiricalCovariance.fit,EmpiricalCovariance.score,EmpiricalCovariance.error_norm,EmpiricalCovariance.mahalanobis",
        "sklearn/neural_network/rbm.py:BernoulliRBM.__init__,BernoulliRBM.transform,BernoulliRBM._mean_hiddens,BernoulliRBM._sample_hiddens,BernoulliRBM._sample_visibles,BernoulliRBM._free_energy,BernoulliRBM.gibbs,BernoulliRBM.partial_fit,BernoulliRBM._fit,BernoulliRBM.score_samples,BernoulliRBM.fit",
        "sklearn/neural_network/multilayer_perceptron.py:_pack,BaseMultilayerPerceptron.__init__,BaseMultilayerPerceptron._unpack,BaseMultilayerPerceptron._forward_pass,BaseMultilayerPerceptron._compute_loss_grad,BaseMultilayerPerceptron._loss_grad_lbfgs,BaseMultilayerPerceptron._backprop,BaseMultilayerPerceptron._initialize,BaseMultilayerPerceptron._init_coef,BaseMultilayerPerceptron._fit,BaseMultilayerPerceptron._validate_hyperparameters,BaseMultilayerPerceptron._fit_lbfgs,BaseMultilayerPerceptron._fit_stochastic,BaseMultilayerPerceptron._update_no_improvement_count,BaseMultilayerPerceptron.fit,BaseMultilayerPerceptron.partial_fit,BaseMultilayerPerceptron._partial_fit,BaseMultilayerPerceptron._predict,MLPClassifier.__init__,MLPClassifier._validate_input,MLPClassifier.predict,MLPClassifier.fit,MLPClassifier.partial_fit,MLPClassifier._partial_fit,MLPClassifier.predict_log_proba,MLPClassifier.predict_proba,MLPRegressor.__init__,MLPRegressor.predict,MLPRegressor._validate_input",
        "sklearn/neural_network/_stochastic_optimizers.py:BaseOptimizer.__init__,BaseOptimizer.update_params,BaseOptimizer.iteration_ends,BaseOptimizer.trigger_stopping,SGDOptimizer.__init__,SGDOptimizer.iteration_ends,SGDOptimizer.trigger_stopping,SGDOptimizer._get_updates,AdamOptimizer.__init__,AdamOptimizer._get_updates",
        "sklearn/neural_network/_base.py:identity,logistic,tanh,relu,softmax,inplace_identity_derivative,inplace_logistic_derivative,inplace_tanh_derivative,inplace_relu_derivative,squared_loss,log_loss,binary_log_loss",
        "sklearn/svm/bounds.py:l1_min_c",
        "sklearn/svm/setup.py:configuration",
        "sklearn/svm/base.py:_one_vs_one_coef,BaseLibSVM.__init__,BaseLibSVM._pairwise,BaseLibSVM.fit,BaseLibSVM._validate_targets,BaseLibSVM._warn_from_fit_status,BaseLibSVM._dense_fit,BaseLibSVM._sparse_fit,BaseLibSVM.predict,BaseLibSVM._dense_predict,BaseLibSVM._sparse_predict,BaseLibSVM._compute_kernel,BaseLibSVM._decision_function,BaseLibSVM._dense_decision_function,BaseLibSVM._sparse_decision_function,BaseLibSVM._validate_for_predict,BaseLibSVM.coef_,BaseLibSVM._get_coef,BaseSVC.__init__,BaseSVC._validate_targets,BaseSVC.decision_function,BaseSVC.predict,BaseSVC._check_proba,BaseSVC.predict_proba,BaseSVC._predict_proba,BaseSVC.predict_log_proba,BaseSVC._predict_log_proba,BaseSVC._dense_predict_proba,BaseSVC._sparse_predict_proba,BaseSVC._get_coef,_get_liblinear_solver_type,_fit_liblinear",
        "sklearn/svm/classes.py:LinearSVC.__init__,LinearSVC.fit,LinearSVR.__init__,LinearSVR.fit,SVC.__init__,NuSVC.__init__,SVR.__init__,NuSVR.__init__,OneClassSVM.__init__,OneClassSVM.fit,OneClassSVM.decision_function,OneClassSVM.score_samples,OneClassSVM.predict",
        "sklearn/decomposition/factor_analysis.py:FactorAnalysis.__init__,FactorAnalysis.fit,FactorAnalysis.transform,FactorAnalysis.get_covariance,FactorAnalysis.get_precision,FactorAnalysis.score_samples,FactorAnalysis.score,my_svd,my_svd",
        "sklearn/decomposition/setup.py:configuration",
        "sklearn/decomposition/dict_learning.py:_sparse_encode,sparse_encode,_update_dict,dict_learning,dict_learning_online,SparseCodingMixin._set_sparse_coding_params,SparseCodingMixin.transform,SparseCoder.__init__,SparseCoder.fit,DictionaryLearning.__init__,DictionaryLearning.fit,MiniBatchDictionaryLearning.__init__,MiniBatchDictionaryLearning.fit,MiniBatchDictionaryLearning.partial_fit",
        "sklearn/decomposition/nmf.py:norm,trace_dot,_check_init,_beta_divergence,_special_sparse_dot,_compute_regularization,_check_string_param,_beta_loss_to_float,_initialize_nmf,_update_coordinate_descent,_fit_coordinate_descent,_multiplicative_update_w,_multiplicative_update_h,_fit_multiplicative_update,non_negative_factorization,NMF.__init__,NMF.fit_transform,NMF.fit,NMF.transform,NMF.inverse_transform",
        "sklearn/decomposition/incremental_pca.py:IncrementalPCA.__init__,IncrementalPCA.fit,IncrementalPCA.partial_fit",
        "sklearn/decomposition/kernel_pca.py:KernelPCA.__init__,KernelPCA._pairwise,KernelPCA._get_kernel,KernelPCA._fit_transform,KernelPCA._fit_inverse_transform,KernelPCA.fit,KernelPCA.fit_transform,KernelPCA.transform,KernelPCA.inverse_transform",
        "sklearn/decomposition/pca.py:_assess_dimension_,_infer_dimension_,PCA.__init__,PCA.fit,PCA.fit_transform,PCA._fit,PCA._fit_full,PCA._fit_truncated,PCA.score_samples,PCA.score,RandomizedPCA.__init__,RandomizedPCA.fit,RandomizedPCA._fit,RandomizedPCA.transform,RandomizedPCA.fit_transform,RandomizedPCA.inverse_transform",
        "sklearn/decomposition/fastica_.py:_gs_decorrelation,_sym_decorrelation,_ica_def,_ica_par,_logcosh,_exp,_cube,fastica,FastICA.__init__,FastICA._fit,FastICA.fit_transform,FastICA.fit,FastICA.transform,FastICA.inverse_transform,g",
        "sklearn/decomposition/online_lda.py:_update_doc_distribution,LatentDirichletAllocation.__init__,LatentDirichletAllocation._check_params,LatentDirichletAllocation._init_latent_vars,LatentDirichletAllocation._e_step,LatentDirichletAllocation._em_step,LatentDirichletAllocation._check_non_neg_array,LatentDirichletAllocation.partial_fit,LatentDirichletAllocation.fit,LatentDirichletAllocation._unnormalized_transform,LatentDirichletAllocation.transform,LatentDirichletAllocation._approx_bound,LatentDirichletAllocation.score,LatentDirichletAllocation._perplexity_precomp_distr,LatentDirichletAllocation.perplexity,_loglikelihood",
        "sklearn/decomposition/sparse_pca.py:SparsePCA.__init__,SparsePCA.fit,SparsePCA.transform,MiniBatchSparsePCA.__init__,MiniBatchSparsePCA.fit",
        "sklearn/decomposition/base.py:_BasePCA.get_covariance,_BasePCA.get_precision,_BasePCA.fit,_BasePCA.transform,_BasePCA.inverse_transform",
        "sklearn/decomposition/truncated_svd.py:TruncatedSVD.__init__,TruncatedSVD.fit,TruncatedSVD.fit_transform,TruncatedSVD.transform,TruncatedSVD.inverse_transform",
        "sklearn/metrics/ranking.py:auc,average_precision_score,roc_auc_score,_binary_clf_curve,precision_recall_curve,roc_curve,label_ranking_average_precision_score,coverage_error,label_ranking_loss,_binary_uninterpolated_average_precision,_binary_roc_auc_score",
        "sklearn/metrics/setup.py:configuration",
        "sklearn/metrics/pairwise.py:_return_float_dtype,check_pairwise_arrays,check_paired_arrays,euclidean_distances,pairwise_distances_argmin_min,pairwise_distances_argmin,manhattan_distances,cosine_distances,paired_euclidean_distances,paired_manhattan_distances,paired_cosine_distances,paired_distances,linear_kernel,polynomial_kernel,sigmoid_kernel,rbf_kernel,laplacian_kernel,cosine_similarity,additive_chi2_kernel,chi2_kernel,distance_metrics,_parallel_pairwise,_pairwise_callable,pairwise_distances,kernel_metrics,pairwise_kernels",
        "sklearn/metrics/regression.py:_check_reg_targets,mean_absolute_error,mean_squared_error,mean_squared_log_error,median_absolute_error,explained_variance_score,r2_score",
        "sklearn/metrics/base.py:_average_binary_score",
        "sklearn/metrics/classification.py:_check_targets,_weighted_sum,accuracy_score,confusion_matrix,cohen_kappa_score,jaccard_similarity_score,matthews_corrcoef,zero_one_loss,f1_score,fbeta_score,_prf_divide,precision_recall_fscore_support,precision_score,recall_score,balanced_accuracy_score,classification_report,hamming_loss,log_loss,hinge_loss,_check_binary_probabilistic_predictions,brier_score_loss",
        "sklearn/metrics/scorer.py:_BaseScorer.__init__,_BaseScorer.__call__,_BaseScorer.__repr__,_BaseScorer._factory_args,_PredictScorer.__call__,_ProbaScorer.__call__,_ProbaScorer._factory_args,_ThresholdScorer.__call__,_ThresholdScorer._factory_args,get_scorer,_passthrough_scorer,check_scoring,_check_multimetric_scoring,make_scorer",
        "sklearn/metrics/cluster/bicluster.py:_check_rows_and_columns,_jaccard,_pairwise_similarity,consensus_score",
        "sklearn/metrics/cluster/unsupervised.py:check_number_of_labels,silhouette_score,silhouette_samples,calinski_harabaz_score",
        "sklearn/metrics/cluster/setup.py:configuration",
        "sklearn/metrics/cluster/supervised.py:comb2,check_clusterings,contingency_matrix,adjusted_rand_score,homogeneity_completeness_v_measure,homogeneity_score,completeness_score,v_measure_score,mutual_info_score,adjusted_mutual_info_score,normalized_mutual_info_score,fowlkes_mallows_score,entropy",
        "sklearn/feature_selection/rfe.py:_rfe_single_fit,RFE.__init__,RFE._estimator_type,RFE.fit,RFE._fit,RFE.predict,RFE.score,RFE._get_support_mask,RFE.decision_function,RFE.predict_proba,RFE.predict_log_proba,RFECV.__init__,RFECV.fit",
        "sklearn/feature_selection/from_model.py:_get_feature_importances,_calculate_threshold,SelectFromModel.__init__,SelectFromModel._get_support_mask,SelectFromModel.fit,SelectFromModel.threshold_,SelectFromModel.partial_fit",
        "sklearn/feature_selection/univariate_selection.py:_clean_nans,f_oneway,f_classif,_chisquare,chi2,f_regression,_BaseFilter.__init__,_BaseFilter.fit,_BaseFilter._check_params,SelectPercentile.__init__,SelectPercentile._check_params,SelectPercentile._get_support_mask,SelectKBest.__init__,SelectKBest._check_params,SelectKBest._get_support_mask,SelectFpr.__init__,SelectFpr._get_support_mask,SelectFdr.__init__,SelectFdr._get_support_mask,SelectFwe.__init__,SelectFwe._get_support_mask,GenericUnivariateSelect.__init__,GenericUnivariateSelect._make_selector,GenericUnivariateSelect._check_params,GenericUnivariateSelect._get_support_mask",
        "sklearn/feature_selection/mutual_info_.py:_compute_mi_cc,_compute_mi_cd,_compute_mi,_iterate_columns,_estimate_mi,mutual_info_regression,mutual_info_classif",
        "sklearn/feature_selection/variance_threshold.py:VarianceThreshold.__init__,VarianceThreshold.fit,VarianceThreshold._get_support_mask",
        "sklearn/feature_selection/base.py:SelectorMixin.get_support,SelectorMixin._get_support_mask,SelectorMixin.transform,SelectorMixin.inverse_transform",
        "sklearn/cross_decomposition/cca_.py:CCA.__init__",
        "sklearn/cross_decomposition/pls_.py:_nipals_twoblocks_inner_loop,_svd_cross_product,_center_scale_xy,_PLS.__init__,_PLS.fit,_PLS.transform,_PLS.predict,_PLS.fit_transform,PLSRegression.__init__,PLSCanonical.__init__,PLSSVD.__init__,PLSSVD.fit,PLSSVD.transform,PLSSVD.fit_transform",
        "sklearn/linear_model/logistic.py:_intercept_dot,_logistic_loss_and_grad,_logistic_loss,_logistic_grad_hess,_multinomial_loss,_multinomial_loss_grad,_multinomial_grad_hess,_check_solver_option,logistic_regression_path,_log_reg_scoring_path,LogisticRegression.__init__,LogisticRegression.fit,LogisticRegression.predict_proba,LogisticRegression.predict_log_proba,LogisticRegressionCV.__init__,LogisticRegressionCV.fit,Hs,hessp",
        "sklearn/linear_model/coordinate_descent.py:_alpha_grid,lasso_path,enet_path,ElasticNet.__init__,ElasticNet.fit,ElasticNet.sparse_coef_,ElasticNet._decision_function,Lasso.__init__,_path_residuals,LinearModelCV.__init__,LinearModelCV.fit,LassoCV.__init__,ElasticNetCV.__init__,MultiTaskElasticNet.__init__,MultiTaskElasticNet.fit,MultiTaskLasso.__init__,MultiTaskElasticNetCV.__init__,MultiTaskLassoCV.__init__",
        "sklearn/linear_model/randomized_l1.py:_resample_model,BaseRandomizedLinearModel.__init__,BaseRandomizedLinearModel.fit,BaseRandomizedLinearModel._make_estimator_and_params,BaseRandomizedLinearModel._get_support_mask,_randomized_lasso,RandomizedLasso.__init__,RandomizedLasso._make_estimator_and_params,_randomized_logistic,RandomizedLogisticRegression.__init__,RandomizedLogisticRegression._make_estimator_and_params,RandomizedLogisticRegression._preprocess_data,_lasso_stability_path,lasso_stability_path",
        "sklearn/linear_model/stochastic_gradient.py:BaseSGD.__init__,BaseSGD.set_params,BaseSGD.fit,BaseSGD._validate_params,BaseSGD._get_loss_function,BaseSGD._get_learning_rate_type,BaseSGD._get_penalty_type,BaseSGD._validate_sample_weight,BaseSGD._allocate_parameter_mem,_prepare_fit_binary,fit_binary,BaseSGDClassifier.__init__,BaseSGDClassifier.loss_function,BaseSGDClassifier._partial_fit,BaseSGDClassifier._fit,BaseSGDClassifier._fit_binary,BaseSGDClassifier._fit_multiclass,BaseSGDClassifier.partial_fit,BaseSGDClassifier.fit,SGDClassifier.__init__,SGDClassifier._check_proba,SGDClassifier.predict_proba,SGDClassifier._predict_proba,SGDClassifier.predict_log_proba,SGDClassifier._predict_log_proba,BaseSGDRegressor.__init__,BaseSGDRegressor._partial_fit,BaseSGDRegressor.partial_fit,BaseSGDRegressor._fit,BaseSGDRegressor.fit,BaseSGDRegressor._decision_function,BaseSGDRegressor.predict,BaseSGDRegressor._fit_regressor,SGDRegressor.__init__",
        "sklearn/linear_model/huber.py:_huber_loss_and_gradient,HuberRegressor.__init__,HuberRegressor.fit",
        "sklearn/linear_model/omp.py:_cholesky_omp,_gram_omp,orthogonal_mp,orthogonal_mp_gram,OrthogonalMatchingPursuit.__init__,OrthogonalMatchingPursuit.fit,_omp_path_residues,OrthogonalMatchingPursuitCV.__init__,OrthogonalMatchingPursuitCV.fit",
        "sklearn/linear_model/sag.py:get_auto_step_size,sag_solver",
        "sklearn/linear_model/setup.py:configuration",
        "sklearn/linear_model/bayes.py:BayesianRidge.__init__,BayesianRidge.fit,BayesianRidge.predict,ARDRegression.__init__,ARDRegression.fit,ARDRegression.predict,update_sigma,update_coeff",
        "sklearn/linear_model/theil_sen.py:_modified_weiszfeld_step,_spatial_median,_breakdown_point,_lstsq,TheilSenRegressor.__init__,TheilSenRegressor._check_subparams,TheilSenRegressor.fit",
        "sklearn/linear_model/ransac.py:_dynamic_max_trials,RANSACRegressor.__init__,RANSACRegressor.fit,RANSACRegressor.predict,RANSACRegressor.score",
        "sklearn/linear_model/ridge.py:_solve_sparse_cg,_solve_lsqr,_solve_cholesky,_solve_cholesky_kernel,_solve_svd,ridge_regression,_BaseRidge.__init__,_BaseRidge.fit,Ridge.__init__,Ridge.fit,RidgeClassifier.__init__,RidgeClassifier.fit,RidgeClassifier.classes_,_RidgeGCV.__init__,_RidgeGCV._pre_compute,_RidgeGCV._decomp_diag,_RidgeGCV._diag_dot,_RidgeGCV._errors_and_values_helper,_RidgeGCV._errors,_RidgeGCV._values,_RidgeGCV._pre_compute_svd,_RidgeGCV._errors_and_values_svd_helper,_RidgeGCV._errors_svd,_RidgeGCV._values_svd,_RidgeGCV.fit,_BaseRidgeCV.__init__,_BaseRidgeCV.fit,RidgeClassifierCV.__init__,RidgeClassifierCV.fit,RidgeClassifierCV.classes_,create_mv,create_mv,_mv,_mv,identity_estimator",
        "sklearn/linear_model/perceptron.py:Perceptron.__init__",
        "sklearn/linear_model/least_angle.py:lars_path,Lars.__init__,Lars._get_gram,Lars._fit,Lars.fit,LassoLars.__init__,_check_copy_and_writeable,_lars_path_residues,LarsCV.__init__,LarsCV.fit,LarsCV.alpha,LarsCV.cv_mse_path_,LassoLarsCV.__init__,LassoLarsIC.__init__,LassoLarsIC.fit",
        "sklearn/linear_model/base.py:make_dataset,sparse_center_data,center_data,_preprocess_data,_rescale_data,LinearModel.fit,LinearModel._decision_function,LinearModel.predict,LinearModel._set_intercept,LinearClassifierMixin.decision_function,LinearClassifierMixin.predict,LinearClassifierMixin._predict_proba_lr,SparseCoefMixin.densify,SparseCoefMixin.sparsify,LinearRegression.__init__,LinearRegression.fit,_pre_fit",
        "sklearn/linear_model/passive_aggressive.py:PassiveAggressiveClassifier.__init__,PassiveAggressiveClassifier.partial_fit,PassiveAggressiveClassifier.fit,PassiveAggressiveRegressor.__init__,PassiveAggressiveRegressor.partial_fit,PassiveAggressiveRegressor.fit",
        "sklearn/model_selection/_validation.py:cross_validate,cross_val_score,_fit_and_score,_score,_multimetric_score,cross_val_predict,_fit_and_predict,_check_is_permutation,_index_param_value,permutation_test_score,_permutation_test_score,_shuffle,learning_curve,_translate_train_sizes,_incremental_fit_estimator,validation_curve,_aggregate_score_dicts",
        "sklearn/model_selection/_search.py:ParameterGrid.__init__,ParameterGrid.__iter__,ParameterGrid.__len__,ParameterGrid.__getitem__,ParameterSampler.__init__,ParameterSampler.__iter__,ParameterSampler.__len__,fit_grid_point,_check_param_grid,_CVScoreTuple.__repr__,BaseSearchCV.__init__,BaseSearchCV._estimator_type,BaseSearchCV.score,BaseSearchCV._check_is_fitted,BaseSearchCV.predict,BaseSearchCV.predict_proba,BaseSearchCV.predict_log_proba,BaseSearchCV.decision_function,BaseSearchCV.transform,BaseSearchCV.inverse_transform,BaseSearchCV.classes_,BaseSearchCV.fit,BaseSearchCV.grid_scores_,GridSearchCV.__init__,GridSearchCV._get_param_iterator,RandomizedSearchCV.__init__,RandomizedSearchCV._get_param_iterator,_store",
        "sklearn/model_selection/_split.py:BaseCrossValidator.__init__,BaseCrossValidator.split,BaseCrossValidator._iter_test_masks,BaseCrossValidator._iter_test_indices,BaseCrossValidator.get_n_splits,BaseCrossValidator.__repr__,LeaveOneOut._iter_test_indices,LeaveOneOut.get_n_splits,LeavePOut.__init__,LeavePOut._iter_test_indices,LeavePOut.get_n_splits,_BaseKFold.__init__,_BaseKFold.split,_BaseKFold.get_n_splits,KFold.__init__,KFold._iter_test_indices,GroupKFold.__init__,GroupKFold._iter_test_indices,StratifiedKFold.__init__,StratifiedKFold._make_test_folds,StratifiedKFold._iter_test_masks,StratifiedKFold.split,TimeSeriesSplit.__init__,TimeSeriesSplit.split,LeaveOneGroupOut._iter_test_masks,LeaveOneGroupOut.get_n_splits,LeavePGroupsOut.__init__,LeavePGroupsOut._iter_test_masks,LeavePGroupsOut.get_n_splits,_RepeatedSplits.__init__,_RepeatedSplits.split,_RepeatedSplits.get_n_splits,RepeatedKFold.__init__,RepeatedStratifiedKFold.__init__,BaseShuffleSplit.__init__,BaseShuffleSplit.split,BaseShuffleSplit._iter_indices,BaseShuffleSplit.get_n_splits,BaseShuffleSplit.__repr__,ShuffleSplit._iter_indices,GroupShuffleSplit.__init__,GroupShuffleSplit._iter_indices,_approximate_mode,StratifiedShuffleSplit.__init__,StratifiedShuffleSplit._iter_indices,StratifiedShuffleSplit.split,_validate_shuffle_split_init,_validate_shuffle_split,PredefinedSplit.__init__,PredefinedSplit.split,PredefinedSplit._iter_test_masks,PredefinedSplit.get_n_splits,_CVIterableWrapper.__init__,_CVIterableWrapper.get_n_splits,_CVIterableWrapper.split,check_cv,train_test_split,_build_repr",
        "sklearn/utils/bench.py:total_seconds",
        "sklearn/utils/__init__.py:Bunch.__init__,Bunch.__setattr__,Bunch.__dir__,Bunch.__getattr__,Bunch.__setstate__,safe_mask,axis0_safe_slice,safe_indexing,resample,shuffle,safe_sqr,gen_batches,gen_even_slices,_get_n_jobs,tosequence,indices_to_mask",
        "sklearn/utils/extmath.py:norm,squared_norm,row_norms,fast_logdet,_impose_f_order,fast_dot,density,safe_sparse_dot,randomized_range_finder,randomized_svd,logsumexp,weighted_mode,pinvh,cartesian,svd_flip,log_logistic,softmax,safe_min,make_nonnegative,_incremental_mean_and_var,_deterministic_vector_sign_flip,stable_cumsum",
        "sklearn/utils/optimize.py:_line_search_wolfe12,_cg,newton_cg",
        "sklearn/utils/testing.py:assert_warns,assert_warns_message,assert_no_warnings,ignore_warnings,_IgnoreWarnings.__init__,_IgnoreWarnings.__call__,_IgnoreWarnings.__repr__,_IgnoreWarnings.__enter__,_IgnoreWarnings.__exit__,assert_raise_message,assert_allclose_dense_sparse,fake_mldata,mock_mldata_urlopen.__init__,mock_mldata_urlopen.__call__,install_mldata_mock,uninstall_mldata_mock,all_estimators,set_random_state,if_matplotlib,skip_if_32bit,if_safe_multiprocessing_with_blas,clean_warning_registry,check_skip_network,check_skip_travis,_delete_folder,TempMemmap.__init__,TempMemmap.__enter__,TempMemmap.__exit__,_get_args,_get_func_name,check_docstring_parameters,is_abstract,run_test,run_test,run_test,wrapper",
        "sklearn/utils/_scipy_sparse_lsqr_backport.py:_sym_ortho,lsqr",
        "sklearn/utils/fixes.py:_parse_version,parallel_helper,sparse_min_max,_argmax,_find_missing_index,_arg_min_or_max_axis,_arg_min_or_max,_sparse_argmax,_argmax,makedirs,MaskedArray.__getstate__,divide,_minor_reduce,_min_or_max_axis,_sparse_min_or_max,sparse_min_max",
        "sklearn/utils/metaestimators.py:_BaseComposition.__init__,_BaseComposition._get_params,_BaseComposition._set_params,_BaseComposition._replace_estimator,_BaseComposition._validate_names,_IffHasAttrDescriptor.__init__,_IffHasAttrDescriptor.__get__,if_delegate_has_method,_safe_split",
        "sklearn/utils/random.py:choice,random_choice_csc",
        "sklearn/utils/setup.py:configuration",
        "sklearn/utils/linear_assignment_.py:linear_assignment,_HungarianState.__init__,_HungarianState._find_prime_in_row,_HungarianState._clear_covers,_hungarian,_step1,_step3,_step4,_step5,_step6",
        "sklearn/utils/validation.py:_assert_all_finite,assert_all_finite,as_float_array,_is_arraylike,_num_samples,_shape_repr,check_memory,check_consistent_length,indexable,_ensure_sparse_format,_ensure_no_complex_data,check_array,check_X_y,column_or_1d,check_random_state,has_fit_parameter,check_symmetric,check_is_fitted,check_non_negative",
        "sklearn/utils/mocking.py:ArraySlicingWrapper.__init__,ArraySlicingWrapper.__getitem__,MockDataFrame.__init__,MockDataFrame.__len__,MockDataFrame.__array__,MockDataFrame.__eq__,MockDataFrame.__ne__,CheckingClassifier.__init__,CheckingClassifier.fit,CheckingClassifier.predict,CheckingClassifier.score",
        "sklearn/utils/multiclass.py:_unique_multiclass,_unique_indicator,unique_labels,_is_integral_float,is_multilabel,check_classification_targets,type_of_target,_check_partial_fit_first_call,class_distribution,_ovr_decision_function",
        "sklearn/utils/arpack.py:eigs,eigsh,svds",
        "sklearn/utils/estimator_checks.py:_yield_non_meta_checks,_yield_classifier_checks,check_supervised_y_no_nan,_yield_regressor_checks,_yield_transformer_checks,_yield_clustering_checks,_yield_all_checks,check_estimator,_boston_subset,set_checking_parameters,NotAnArray.__init__,NotAnArray.__array__,_is_32bit,_is_pairwise,_is_pairwise_metric,pairwise_estimator_convert_X,check_estimator_sparse_data,check_sample_weights_pandas_series,check_sample_weights_list,check_dtype_object,check_complex_data,check_dict_unchanged,is_public_parameter,check_dont_overwrite_parameters,check_fit2d_predict1d,_apply_func,check_methods_subset_invariance,check_fit2d_1sample,check_fit2d_1feature,check_fit1d,check_transformer_general,check_transformer_data_not_an_array,check_transformers_unfitted,_check_transformer,check_pipeline_consistency,check_fit_score_takes_y,check_estimators_dtypes,check_estimators_empty_data_messages,check_estimators_nan_inf,check_estimators_pickle,check_estimators_partial_fit_n_features,check_clustering,check_clusterer_compute_labels_predict,check_classifiers_one_label,check_classifiers_train,check_estimators_fit_returns_self,check_estimators_unfitted,check_supervised_y_2d,check_classifiers_classes,check_regressors_int,check_regressors_train,check_regressors_no_decision_function,check_class_weight_classifiers,check_class_weight_balanced_classifiers,check_class_weight_balanced_linear_classifier,check_estimators_overwrite_params,check_no_attributes_set_in_init,check_sparsify_coefficients,check_classifier_data_not_an_array,check_regressor_data_not_an_array,check_estimators_data_not_an_array,check_parameters_default_constructible,multioutput_estimator_convert_y_2d,check_non_transformer_estimators_n_iter,check_transformer_n_iter,check_get_params_invariance,check_classifiers_regression_target,check_decision_proba_consistency,T.__init__,T.fit,T.transform,param_filter",
        "sklearn/utils/deprecation.py:deprecated.__init__,deprecated.__call__,deprecated._decorate_class,deprecated._decorate_fun,deprecated._update_doc,_is_deprecated,DeprecationDict.__init__,DeprecationDict.__getitem__,DeprecationDict.get,DeprecationDict.add_warning,wrapped,wrapped",
        "sklearn/utils/class_weight.py:compute_class_weight,compute_sample_weight",
        "sklearn/utils/sparsefuncs.py:_raise_typeerror,_raise_error_wrong_axis,inplace_csr_column_scale,inplace_csr_row_scale,mean_variance_axis,incr_mean_variance_axis,inplace_column_scale,inplace_row_scale,inplace_swap_row_csc,inplace_swap_row_csr,inplace_swap_row,inplace_swap_column,min_max_axis,count_nonzero,_get_median,_get_elem_at_rank,csc_median_axis_0",
        "sklearn/utils/graph.py:single_source_shortest_path_length,connected_components,graph_laplacian",
        "sklearn/utils/_unittest_backport.py:_is_subtype,_BaseTestCaseContext.__init__,_BaseTestCaseContext._raiseFailure,_AssertRaisesBaseContext.__init__,_AssertRaisesBaseContext.handle,_AssertRaisesContext.__enter__,_AssertRaisesContext.__exit__,TestCase._formatMessage,TestCase.assertRaises,TestCase.assertRaisesRegex",
        "sklearn/utils/stats.py:rankdata,_weighted_percentile",
        "sklearn/utils/sparsetools/__init__.py:connected_components",
        "sklearn/utils/sparsetools/setup.py:configuration",
        "sklearn/semi_supervised/label_propagation.py:BaseLabelPropagation.__init__,BaseLabelPropagation._get_kernel,BaseLabelPropagation._build_graph,BaseLabelPropagation.predict,BaseLabelPropagation.predict_proba,BaseLabelPropagation.fit,LabelPropagation.__init__,LabelPropagation._build_graph,LabelPropagation.fit,LabelSpreading.__init__,LabelSpreading._build_graph",
        "examples/plot_multilabel.py:plot_hyperplane,plot_subfigure",
        "examples/hetero_feature_union.py:ItemSelector.__init__,ItemSelector.fit,ItemSelector.transform,TextStats.fit,TextStats.transform,SubjectBodyExtractor.fit,SubjectBodyExtractor.transform",
        "examples/preprocessing/plot_all_scaling.py:create_axes,plot_distribution,make_plot",
        "examples/preprocessing/plot_function_transformer.py:_generate_vector,generate_dataset,all_but_first_column,drop_first_component",
        "examples/classification/plot_lda.py:generate_data",
        "examples/classification/plot_lda_qda.py:dataset_fixed_cov,dataset_cov,plot_data,plot_ellipse,plot_lda_cov,plot_qda_cov",
        "examples/neural_networks/plot_mlp_training_curves.py:plot_on_dataset",
        "examples/neural_networks/plot_rbm_logistic_classification.py:nudge_dataset",
        "examples/bicluster/plot_bicluster_newsgroups.py:number_normalizer,NumberNormalizingVectorizer.build_tokenizer,bicluster_ncut,most_common",
        "examples/neighbors/plot_kde_1d.py:format_func",
        "examples/gaussian_process/plot_gpr_noisy_targets.py:f",
        "examples/gaussian_process/plot_gpc_isoprobability.py:g",
        "examples/manifold/plot_lle_digits.py:plot_embedding",
        "examples/cluster/plot_adjusted_for_chance_measures.py:uniform_labelings_scores",
        "examples/cluster/plot_agglomerative_clustering_metrics.py:sqr",
        "examples/cluster/plot_kmeans_digits.py:bench_k_means",
        "examples/cluster/plot_digits_linkage.py:nudge_images,plot_clustering",
        "examples/cluster/plot_kmeans_stability_low_dim_dense.py:make_data",
        "examples/cluster/plot_color_quantization.py:recreate_image",
        "examples/datasets/plot_random_multilabel_dataset.py:plot_2d",
        "examples/mixture/plot_concentration_prior.py:plot_ellipses,plot_results",
        "examples/mixture/plot_gmm.py:plot_results",
        "examples/mixture/plot_gmm_sin.py:plot_results,plot_samples",
        "examples/mixture/plot_gmm_covariances.py:make_ellipses",
        "examples/ensemble/plot_gradient_boosting_oob.py:heldout_score,cv_estimate",
        "examples/ensemble/plot_partial_dependence.py:main",
        "examples/ensemble/plot_gradient_boosting_quantile.py:f",
        "examples/ensemble/plot_gradient_boosting_early_stopping.py:autolabel",
        "examples/ensemble/plot_bias_variance.py:f,generate",
        "examples/svm/plot_custom_kernel.py:my_kernel",
        "examples/svm/plot_rbf_parameters.py:MidpointNormalize.__init__,MidpointNormalize.__call__",
        "examples/svm/plot_weighted_samples.py:plot_decision_function",
        "examples/svm/plot_iris.py:make_meshgrid,plot_contours",
        "examples/decomposition/plot_pca_3d.py:pdf,plot_figs",
        "examples/decomposition/plot_sparse_coding.py:ricker_function,ricker_matrix",
        "examples/decomposition/plot_ica_vs_pca.py:plot_samples",
        "examples/decomposition/plot_faces_decomposition.py:plot_gallery",
        "examples/decomposition/plot_image_denoising.py:show_with_diff",
        "examples/decomposition/plot_pca_vs_fa_model_selection.py:compute_scores,shrunk_cov_score,lw_score",
        "examples/linear_model/plot_lasso_model_selection.py:plot_ic_criterion",
        "examples/linear_model/plot_sgd_iris.py:plot_hyperplane,line",
        "examples/linear_model/plot_bayesian_ridge.py:f",
        "examples/linear_model/plot_polynomial_interpolation.py:f",
        "examples/linear_model/plot_logistic.py:model",
        "examples/linear_model/plot_ard.py:f",
        "examples/linear_model/plot_ols_3d.py:plot_figs",
        "examples/linear_model/plot_logistic_multinomial.py:plot_hyperplane,line",
        "examples/linear_model/plot_sgd_loss_functions.py:modified_huber_loss",
        "examples/model_selection/plot_randomized_search.py:report",
        "examples/model_selection/plot_underfitting_overfitting.py:true_fun",
        "examples/model_selection/plot_confusion_matrix.py:plot_confusion_matrix",
        "examples/model_selection/plot_learning_curve.py:plot_learning_curve",
        "examples/calibration/plot_calibration_curve.py:plot_calibration_curve",
        "examples/applications/plot_species_distribution_modeling.py:create_species_bunch,plot_species_distribution",
        "examples/applications/wikipedia_principal_eigenvector.py:index,short_name,get_redirects,get_adjacency_matrix,centrality_scores",
        "examples/applications/plot_face_recognition.py:plot_gallery,title",
        "examples/applications/plot_topics_extraction_with_nmf_lda.py:print_top_words",
        "examples/applications/plot_stock_market.py:retry,quotes_historical_google,wrapper",
        "examples/applications/plot_prediction_latency.py:_not_in_sphinx,atomic_benchmark_estimator,bulk_benchmark_estimator,benchmark_estimator,generate_dataset,boxplot_runtimes,benchmark,n_feature_influence,plot_n_features_influence,benchmark_throughputs,plot_benchmark_throughput",
        "examples/applications/plot_model_complexity_influence.py:generate_data,benchmark_influence,plot_influence,_count_nonzero_coefficients",
        "examples/applications/plot_tomography_l1_reconstruction.py:_weights,_generate_center_coordinates,build_projection_operator,generate_synthetic_data",
        "examples/applications/svm_gui.py:Model.__init__,Model.changed,Model.add_observer,Model.set_surface,Model.dump_svmlight_file,Controller.__init__,Controller.fit,Controller.decision_surface,Controller.clear_data,Controller.add_example,Controller.refit,View.__init__,View.plot_kernels,View.onclick,View.update_example,View.update,View.remove_surface,View.plot_support_vectors,View.plot_decision_surface,ControllBar.__init__,get_parser,main",
        "examples/applications/plot_out_of_core_classification.py:_not_in_sphinx,ReutersParser.__init__,ReutersParser.handle_starttag,ReutersParser.handle_endtag,ReutersParser._reset,ReutersParser.parse,ReutersParser.handle_data,ReutersParser.start_reuters,ReutersParser.end_reuters,ReutersParser.start_title,ReutersParser.end_title,ReutersParser.start_body,ReutersParser.end_body,ReutersParser.start_topics,ReutersParser.end_topics,ReutersParser.start_d,ReutersParser.end_d,stream_reuters_documents,get_minibatch,iter_minibatches,progress,plot_accuracy,autolabel,progress",
        "examples/text/plot_hashing_vs_dict_vectorizer.py:n_nonzero_columns,tokens,token_freqs",
        "examples/text/plot_document_clustering.py:is_interactive",
        "examples/text/plot_document_classification_20newsgroups.py:is_interactive,size_mb,trim,benchmark",
        "benchmarks/bench_saga.py:fit_single,_predict_proba,exp,plot",
        "benchmarks/bench_covertype.py:load_data",
        "benchmarks/bench_sparsify.py:sparsity_ratio,benchmark_dense_predict,benchmark_sparse_predict,score",
        "benchmarks/bench_rcv1_logreg_convergence.py:get_loss,bench_one,bench,plot_train_losses,plot_train_scores,plot_test_scores,plot_dloss,get_max_squared_sum",
        "benchmarks/bench_multilabel_metrics.py:benchmark,_tabulate,_plot",
        "benchmarks/bench_plot_neighbors.py:get_data,barplot_neighbors",
        "benchmarks/bench_plot_fastkmeans.py:compute_bench,compute_bench_2",
        "benchmarks/bench_plot_nmf.py:_norm,_nls_subproblem,_fit_projected_gradient,_PGNMF.__init__,_PGNMF.fit,_PGNMF.transform,_PGNMF.inverse_transform,_PGNMF.fit_transform,_PGNMF._fit_transform,plot_results,bench_one,run_bench,load_20news,load_faces,build_clfs",
        "benchmarks/bench_random_projections.py:type_auto_or_float,type_auto_or_int,compute_time,bench_scikit_transformer,make_sparse_random_data,print_row",
        "benchmarks/bench_sample_without_replacement.py:compute_time,bench_sample",
        "benchmarks/bench_plot_randomized_svd.py:unpickle,handle_missing_dataset,get_data,plot_time_vs_s,scatter_time_vs_s,plot_power_iter_vs_s,svd_timing,norm_diff,scalable_frobenius_norm_discrepancy,bench_a,bench_b,bench_c",
        "benchmarks/bench_isolation_forest.py:print_outlier_ratio",
        "benchmarks/bench_plot_omp_lars.py:compute_bench",
        "benchmarks/bench_plot_svd.py:compute_bench",
        "benchmarks/bench_mnist.py:load_data",
        "benchmarks/bench_tsne_mnist.py:load_data,nn_accuracy,tsne_fit_transform,sanitize,bhtsne",
        "benchmarks/bench_tree.py:bench_scikit_tree_classifier,bench_scikit_tree_regressor",
        "benchmarks/bench_plot_incremental_pca.py:plot_results,benchmark,plot_feature_times,plot_feature_errors,plot_batch_times,plot_batch_errors,fixed_batch_size_comparison,variable_batch_size_comparison",
        "benchmarks/bench_glmnet.py:rmse,bench",
        "benchmarks/bench_text_vectorizers.py:run_vectorizer,f",
        "benchmarks/bench_plot_lasso_path.py:compute_bench",
        "benchmarks/bench_plot_parallel_pairwise.py:plot,euclidean_distances,rbf_kernels",
        "benchmarks/bench_isotonic.py:generate_perturbed_logarithm_dataset,generate_logistic_dataset,generate_pathological_dataset,bench_isotonic_regression",
        "benchmarks/bench_lasso.py:compute_bench"
    ]
}